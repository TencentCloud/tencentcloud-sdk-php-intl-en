<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Tcr\V20190924\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeTagRetentionExecution response structure.
 *
 * @method array getRetentionExecutionList() Obtain List of tag retention execution records
 * @method void setRetentionExecutionList(array $RetentionExecutionList) Set List of tag retention execution records
 * @method integer getTotalCount() Obtain Total number of tag retention execution records
 * @method void setTotalCount(integer $TotalCount) Set Total number of tag retention execution records
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeTagRetentionExecutionResponse extends AbstractModel
{
    /**
     * @var array List of tag retention execution records
     */
    public $RetentionExecutionList;

    /**
     * @var integer Total number of tag retention execution records
     */
    public $TotalCount;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $RetentionExecutionList List of tag retention execution records
     * @param integer $TotalCount Total number of tag retention execution records
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("RetentionExecutionList",$param) and $param["RetentionExecutionList"] !== null) {
            $this->RetentionExecutionList = [];
            foreach ($param["RetentionExecutionList"] as $key => $value){
                $obj = new RetentionExecution();
                $obj->deserialize($value);
                array_push($this->RetentionExecutionList, $obj);
            }
        }

        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
