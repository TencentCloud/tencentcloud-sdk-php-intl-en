<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Kms\V20190118\Models;
use TencentCloud\Common\AbstractModel;

/**
 * ListAlgorithms response structure.
 *
 * @method array getSymmetricAlgorithms() Obtain Symmetric encryption algorithms supported in this region
 * @method void setSymmetricAlgorithms(array $SymmetricAlgorithms) Set Symmetric encryption algorithms supported in this region
 * @method array getAsymmetricAlgorithms() Obtain Asymmetric encryption algorithms supported in this region
 * @method void setAsymmetricAlgorithms(array $AsymmetricAlgorithms) Set Asymmetric encryption algorithms supported in this region
 * @method array getAsymmetricSignVerifyAlgorithms() Obtain Asymmetric signature verification algorithms supported in the current region
 * @method void setAsymmetricSignVerifyAlgorithms(array $AsymmetricSignVerifyAlgorithms) Set Asymmetric signature verification algorithms supported in the current region
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class ListAlgorithmsResponse extends AbstractModel
{
    /**
     * @var array Symmetric encryption algorithms supported in this region
     */
    public $SymmetricAlgorithms;

    /**
     * @var array Asymmetric encryption algorithms supported in this region
     */
    public $AsymmetricAlgorithms;

    /**
     * @var array Asymmetric signature verification algorithms supported in the current region
     */
    public $AsymmetricSignVerifyAlgorithms;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $SymmetricAlgorithms Symmetric encryption algorithms supported in this region
     * @param array $AsymmetricAlgorithms Asymmetric encryption algorithms supported in this region
     * @param array $AsymmetricSignVerifyAlgorithms Asymmetric signature verification algorithms supported in the current region
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("SymmetricAlgorithms",$param) and $param["SymmetricAlgorithms"] !== null) {
            $this->SymmetricAlgorithms = [];
            foreach ($param["SymmetricAlgorithms"] as $key => $value){
                $obj = new AlgorithmInfo();
                $obj->deserialize($value);
                array_push($this->SymmetricAlgorithms, $obj);
            }
        }

        if (array_key_exists("AsymmetricAlgorithms",$param) and $param["AsymmetricAlgorithms"] !== null) {
            $this->AsymmetricAlgorithms = [];
            foreach ($param["AsymmetricAlgorithms"] as $key => $value){
                $obj = new AlgorithmInfo();
                $obj->deserialize($value);
                array_push($this->AsymmetricAlgorithms, $obj);
            }
        }

        if (array_key_exists("AsymmetricSignVerifyAlgorithms",$param) and $param["AsymmetricSignVerifyAlgorithms"] !== null) {
            $this->AsymmetricSignVerifyAlgorithms = [];
            foreach ($param["AsymmetricSignVerifyAlgorithms"] as $key => $value){
                $obj = new AlgorithmInfo();
                $obj->deserialize($value);
                array_push($this->AsymmetricSignVerifyAlgorithms, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
