<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Lke\V20231130\Models;
use TencentCloud\Common\AbstractModel;

/**
 * ListQA response structure.
 *
 * @method string getTotal() Obtain Q&A quantity.
 * @method void setTotal(string $Total) Set Q&A quantity.
 * @method string getWaitVerifyTotal() Obtain Quantity of pending verification Q&As.
 * @method void setWaitVerifyTotal(string $WaitVerifyTotal) Set Quantity of pending verification Q&As.
 * @method string getNotAcceptedTotal() Obtain Quantity of not adopted Q&As.
 * @method void setNotAcceptedTotal(string $NotAcceptedTotal) Set Quantity of not adopted Q&As.
 * @method string getAcceptedTotal() Obtain Quantity of adopted Q&As.
 * @method void setAcceptedTotal(string $AcceptedTotal) Set Quantity of adopted Q&As.
 * @method integer getPageNumber() Obtain Page number.
 * @method void setPageNumber(integer $PageNumber) Set Page number.
 * @method array getList() Obtain Q&As details.
 * @method void setList(array $List) Set Q&As details.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class ListQAResponse extends AbstractModel
{
    /**
     * @var string Q&A quantity.
     */
    public $Total;

    /**
     * @var string Quantity of pending verification Q&As.
     */
    public $WaitVerifyTotal;

    /**
     * @var string Quantity of not adopted Q&As.
     */
    public $NotAcceptedTotal;

    /**
     * @var string Quantity of adopted Q&As.
     */
    public $AcceptedTotal;

    /**
     * @var integer Page number.
     */
    public $PageNumber;

    /**
     * @var array Q&As details.
     */
    public $List;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $Total Q&A quantity.
     * @param string $WaitVerifyTotal Quantity of pending verification Q&As.
     * @param string $NotAcceptedTotal Quantity of not adopted Q&As.
     * @param string $AcceptedTotal Quantity of adopted Q&As.
     * @param integer $PageNumber Page number.
     * @param array $List Q&As details.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Total",$param) and $param["Total"] !== null) {
            $this->Total = $param["Total"];
        }

        if (array_key_exists("WaitVerifyTotal",$param) and $param["WaitVerifyTotal"] !== null) {
            $this->WaitVerifyTotal = $param["WaitVerifyTotal"];
        }

        if (array_key_exists("NotAcceptedTotal",$param) and $param["NotAcceptedTotal"] !== null) {
            $this->NotAcceptedTotal = $param["NotAcceptedTotal"];
        }

        if (array_key_exists("AcceptedTotal",$param) and $param["AcceptedTotal"] !== null) {
            $this->AcceptedTotal = $param["AcceptedTotal"];
        }

        if (array_key_exists("PageNumber",$param) and $param["PageNumber"] !== null) {
            $this->PageNumber = $param["PageNumber"];
        }

        if (array_key_exists("List",$param) and $param["List"] !== null) {
            $this->List = [];
            foreach ($param["List"] as $key => $value){
                $obj = new ListQaItem();
                $obj->deserialize($value);
                array_push($this->List, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
