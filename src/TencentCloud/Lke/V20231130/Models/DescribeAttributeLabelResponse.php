<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Lke\V20231130\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeAttributeLabel response structure.
 *
 * @method string getAttributeBizId() Obtain Attribute ID.
 * @method void setAttributeBizId(string $AttributeBizId) Set Attribute ID.
 * @method string getAttrKey() Obtain Attribute identifier.
 * @method void setAttrKey(string $AttrKey) Set Attribute identifier.
 * @method string getAttrName() Obtain Attribute name.
 * @method void setAttrName(string $AttrName) Set Attribute name.
 * @method string getLabelNumber() Obtain Quantity of labels.
 * @method void setLabelNumber(string $LabelNumber) Set Quantity of labels.
 * @method array getLabels() Obtain Label name.
 * @method void setLabels(array $Labels) Set Label name.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeAttributeLabelResponse extends AbstractModel
{
    /**
     * @var string Attribute ID.
     */
    public $AttributeBizId;

    /**
     * @var string Attribute identifier.
     */
    public $AttrKey;

    /**
     * @var string Attribute name.
     */
    public $AttrName;

    /**
     * @var string Quantity of labels.
     */
    public $LabelNumber;

    /**
     * @var array Label name.
     */
    public $Labels;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $AttributeBizId Attribute ID.
     * @param string $AttrKey Attribute identifier.
     * @param string $AttrName Attribute name.
     * @param string $LabelNumber Quantity of labels.
     * @param array $Labels Label name.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("AttributeBizId",$param) and $param["AttributeBizId"] !== null) {
            $this->AttributeBizId = $param["AttributeBizId"];
        }

        if (array_key_exists("AttrKey",$param) and $param["AttrKey"] !== null) {
            $this->AttrKey = $param["AttrKey"];
        }

        if (array_key_exists("AttrName",$param) and $param["AttrName"] !== null) {
            $this->AttrName = $param["AttrName"];
        }

        if (array_key_exists("LabelNumber",$param) and $param["LabelNumber"] !== null) {
            $this->LabelNumber = $param["LabelNumber"];
        }

        if (array_key_exists("Labels",$param) and $param["Labels"] !== null) {
            $this->Labels = [];
            foreach ($param["Labels"] as $key => $value){
                $obj = new AttributeLabel();
                $obj->deserialize($value);
                array_push($this->Labels, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
