<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Lke\V20231130\Models;
use TencentCloud\Common\AbstractModel;

/**
 * GetDocPreview response structure.
 *
 * @method string getFileName() Obtain Filename. The release end always uses this name.
 * @method void setFileName(string $FileName) Set Filename. The release end always uses this name.
 * @method string getFileType() Obtain File type.
 * @method void setFileType(string $FileType) Set File type.
 * @method string getCosUrl() Obtain COS path.

 * @method void setCosUrl(string $CosUrl) Set COS path.

 * @method string getUrl() Obtain COS temporary url.

 * @method void setUrl(string $Url) Set COS temporary url.

 * @method string getBucket() Obtain COS bucket.

 * @method void setBucket(string $Bucket) Set COS bucket.

 * @method string getNewName() Obtain It is the new name in the case of document renaming. It shall be used preferentially on the evaluation end.
 * @method void setNewName(string $NewName) Set It is the new name in the case of document renaming. It shall be used preferentially on the evaluation end.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class GetDocPreviewResponse extends AbstractModel
{
    /**
     * @var string Filename. The release end always uses this name.
     */
    public $FileName;

    /**
     * @var string File type.
     */
    public $FileType;

    /**
     * @var string COS path.

     */
    public $CosUrl;

    /**
     * @var string COS temporary url.

     */
    public $Url;

    /**
     * @var string COS bucket.

     */
    public $Bucket;

    /**
     * @var string It is the new name in the case of document renaming. It shall be used preferentially on the evaluation end.
     */
    public $NewName;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $FileName Filename. The release end always uses this name.
     * @param string $FileType File type.
     * @param string $CosUrl COS path.

     * @param string $Url COS temporary url.

     * @param string $Bucket COS bucket.

     * @param string $NewName It is the new name in the case of document renaming. It shall be used preferentially on the evaluation end.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("FileName",$param) and $param["FileName"] !== null) {
            $this->FileName = $param["FileName"];
        }

        if (array_key_exists("FileType",$param) and $param["FileType"] !== null) {
            $this->FileType = $param["FileType"];
        }

        if (array_key_exists("CosUrl",$param) and $param["CosUrl"] !== null) {
            $this->CosUrl = $param["CosUrl"];
        }

        if (array_key_exists("Url",$param) and $param["Url"] !== null) {
            $this->Url = $param["Url"];
        }

        if (array_key_exists("Bucket",$param) and $param["Bucket"] !== null) {
            $this->Bucket = $param["Bucket"];
        }

        if (array_key_exists("NewName",$param) and $param["NewName"] !== null) {
            $this->NewName = $param["NewName"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
