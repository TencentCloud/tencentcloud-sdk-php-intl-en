<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Emr\V20190103\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeServiceNodeInfos response structure.
 *
 * @method integer getTotalCnt() Obtain Total number.
 * @method void setTotalCnt(integer $TotalCnt) Set Total number.
 * @method array getServiceNodeList() Obtain Process information.
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setServiceNodeList(array $ServiceNodeList) Set Process information.
Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getAliasInfo() Obtain Alias serialization of all nodes in the cluster.
 * @method void setAliasInfo(string $AliasInfo) Set Alias serialization of all nodes in the cluster.
 * @method array getSupportNodeFlagFilterList() Obtain Supported FlagNode list

Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setSupportNodeFlagFilterList(array $SupportNodeFlagFilterList) Set Supported FlagNode list

Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeServiceNodeInfosResponse extends AbstractModel
{
    /**
     * @var integer Total number.
     */
    public $TotalCnt;

    /**
     * @var array Process information.
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $ServiceNodeList;

    /**
     * @var string Alias serialization of all nodes in the cluster.
     */
    public $AliasInfo;

    /**
     * @var array Supported FlagNode list

Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $SupportNodeFlagFilterList;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCnt Total number.
     * @param array $ServiceNodeList Process information.
Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $AliasInfo Alias serialization of all nodes in the cluster.
     * @param array $SupportNodeFlagFilterList Supported FlagNode list

Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCnt",$param) and $param["TotalCnt"] !== null) {
            $this->TotalCnt = $param["TotalCnt"];
        }

        if (array_key_exists("ServiceNodeList",$param) and $param["ServiceNodeList"] !== null) {
            $this->ServiceNodeList = [];
            foreach ($param["ServiceNodeList"] as $key => $value){
                $obj = new ServiceNodeDetailInfo();
                $obj->deserialize($value);
                array_push($this->ServiceNodeList, $obj);
            }
        }

        if (array_key_exists("AliasInfo",$param) and $param["AliasInfo"] !== null) {
            $this->AliasInfo = $param["AliasInfo"];
        }

        if (array_key_exists("SupportNodeFlagFilterList",$param) and $param["SupportNodeFlagFilterList"] !== null) {
            $this->SupportNodeFlagFilterList = $param["SupportNodeFlagFilterList"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
