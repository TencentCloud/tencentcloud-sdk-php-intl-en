<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Emr\V20190103\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeHBaseTableOverview response structure.
 *
 * @method array getTableMonitorList() Obtain Overview data array
 * @method void setTableMonitorList(array $TableMonitorList) Set Overview data array
 * @method integer getTotalCount() Obtain Overview data array length
 * @method void setTotalCount(integer $TotalCount) Set Overview data array length
 * @method array getSchemaList() Obtain Table schema information
 * @method void setSchemaList(array $SchemaList) Set Table schema information
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeHBaseTableOverviewResponse extends AbstractModel
{
    /**
     * @var array Overview data array
     */
    public $TableMonitorList;

    /**
     * @var integer Overview data array length
     */
    public $TotalCount;

    /**
     * @var array Table schema information
     */
    public $SchemaList;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $TableMonitorList Overview data array
     * @param integer $TotalCount Overview data array length
     * @param array $SchemaList Table schema information
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TableMonitorList",$param) and $param["TableMonitorList"] !== null) {
            $this->TableMonitorList = [];
            foreach ($param["TableMonitorList"] as $key => $value){
                $obj = new OverviewRow();
                $obj->deserialize($value);
                array_push($this->TableMonitorList, $obj);
            }
        }

        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("SchemaList",$param) and $param["SchemaList"] !== null) {
            $this->SchemaList = [];
            foreach ($param["SchemaList"] as $key => $value){
                $obj = new TableSchemaItem();
                $obj->deserialize($value);
                array_push($this->SchemaList, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
