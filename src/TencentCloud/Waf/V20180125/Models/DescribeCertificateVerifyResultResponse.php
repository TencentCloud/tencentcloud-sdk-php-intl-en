<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Waf\V20180125\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeCertificateVerifyResult response structure.
 *
 * @method integer getStatus() Obtain Status code
0: normal certificate
310: abnormal certificate
311: certificate expired
312: certificate about to expire
 * @method void setStatus(integer $Status) Set Status code
0: normal certificate
310: abnormal certificate
311: certificate expired
312: certificate about to expire
 * @method array getDetail() Obtain Error details
 * @method void setDetail(array $Detail) Set Error details
 * @method string getNotAfter() Obtain Expiration time
 * @method void setNotAfter(string $NotAfter) Set Expiration time
 * @method integer getChanged() Obtain Whether the certificate is changed
0: not changed
1: changed
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setChanged(integer $Changed) Set Whether the certificate is changed
0: not changed
1: changed
Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeCertificateVerifyResultResponse extends AbstractModel
{
    /**
     * @var integer Status code
0: normal certificate
310: abnormal certificate
311: certificate expired
312: certificate about to expire
     */
    public $Status;

    /**
     * @var array Error details
     */
    public $Detail;

    /**
     * @var string Expiration time
     */
    public $NotAfter;

    /**
     * @var integer Whether the certificate is changed
0: not changed
1: changed
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $Changed;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $Status Status code
0: normal certificate
310: abnormal certificate
311: certificate expired
312: certificate about to expire
     * @param array $Detail Error details
     * @param string $NotAfter Expiration time
     * @param integer $Changed Whether the certificate is changed
0: not changed
1: changed
Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Status",$param) and $param["Status"] !== null) {
            $this->Status = $param["Status"];
        }

        if (array_key_exists("Detail",$param) and $param["Detail"] !== null) {
            $this->Detail = $param["Detail"];
        }

        if (array_key_exists("NotAfter",$param) and $param["NotAfter"] !== null) {
            $this->NotAfter = $param["NotAfter"];
        }

        if (array_key_exists("Changed",$param) and $param["Changed"] !== null) {
            $this->Changed = $param["Changed"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
