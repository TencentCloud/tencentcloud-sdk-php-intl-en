<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Postgres\V20170312\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSlowQueryList response structure.
 *
 * @method integer getTotalCount() Obtain Number of slow logs found, with a maximum of 10,000 entries.	
 * @method void setTotalCount(integer $TotalCount) Set Number of slow logs found, with a maximum of 10,000 entries.	
 * @method array getDurationAnalysis() Obtain Segmented analysis results of the time consumption of the slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setDurationAnalysis(array $DurationAnalysis) Set Segmented analysis results of the time consumption of the slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
 * @method array getRawSlowQueryList() Obtain Collection of detailed information on slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setRawSlowQueryList(array $RawSlowQueryList) Set Collection of detailed information on slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSlowQueryListResponse extends AbstractModel
{
    /**
     * @var integer Number of slow logs found, with a maximum of 10,000 entries.	
     */
    public $TotalCount;

    /**
     * @var array Segmented analysis results of the time consumption of the slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $DurationAnalysis;

    /**
     * @var array Collection of detailed information on slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $RawSlowQueryList;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Number of slow logs found, with a maximum of 10,000 entries.	
     * @param array $DurationAnalysis Segmented analysis results of the time consumption of the slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
     * @param array $RawSlowQueryList Collection of detailed information on slow logs found.
Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("DurationAnalysis",$param) and $param["DurationAnalysis"] !== null) {
            $this->DurationAnalysis = [];
            foreach ($param["DurationAnalysis"] as $key => $value){
                $obj = new DurationAnalysis();
                $obj->deserialize($value);
                array_push($this->DurationAnalysis, $obj);
            }
        }

        if (array_key_exists("RawSlowQueryList",$param) and $param["RawSlowQueryList"] !== null) {
            $this->RawSlowQueryList = [];
            foreach ($param["RawSlowQueryList"] as $key => $value){
                $obj = new RawSlowQuery();
                $obj->deserialize($value);
                array_push($this->RawSlowQueryList, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
