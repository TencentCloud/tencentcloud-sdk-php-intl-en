<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Teo\V20220901\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSecurityJSInjectionRule response structure.
 *
 * @method integer getTotalCount() Obtain Specifies the total rule count for JavaScript injection.
 * @method void setTotalCount(integer $TotalCount) Set Specifies the total rule count for JavaScript injection.
 * @method array getJSInjectionRules() Obtain JavaScript injection rule list.
 * @method void setJSInjectionRules(array $JSInjectionRules) Set JavaScript injection rule list.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSecurityJSInjectionRuleResponse extends AbstractModel
{
    /**
     * @var integer Specifies the total rule count for JavaScript injection.
     */
    public $TotalCount;

    /**
     * @var array JavaScript injection rule list.
     */
    public $JSInjectionRules;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Specifies the total rule count for JavaScript injection.
     * @param array $JSInjectionRules JavaScript injection rule list.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("JSInjectionRules",$param) and $param["JSInjectionRules"] !== null) {
            $this->JSInjectionRules = [];
            foreach ($param["JSInjectionRules"] as $key => $value){
                $obj = new JSInjectionRule();
                $obj->deserialize($value);
                array_push($this->JSInjectionRules, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
