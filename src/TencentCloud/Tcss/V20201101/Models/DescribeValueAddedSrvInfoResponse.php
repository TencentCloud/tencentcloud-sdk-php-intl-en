<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Tcss\V20201101\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeValueAddedSrvInfo response structure.
 *
 * @method integer getRegistryImageCnt() Obtain Number of unlicensed repository images
 * @method void setRegistryImageCnt(integer $RegistryImageCnt) Set Number of unlicensed repository images
 * @method integer getLocalImageCnt() Obtain Number of unlicensed local images
 * @method void setLocalImageCnt(integer $LocalImageCnt) Set Number of unlicensed local images
 * @method integer getUnusedAuthorizedCnt() Obtain Number of unused image security scan licenses
 * @method void setUnusedAuthorizedCnt(integer $UnusedAuthorizedCnt) Set Number of unused image security scan licenses
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeValueAddedSrvInfoResponse extends AbstractModel
{
    /**
     * @var integer Number of unlicensed repository images
     */
    public $RegistryImageCnt;

    /**
     * @var integer Number of unlicensed local images
     */
    public $LocalImageCnt;

    /**
     * @var integer Number of unused image security scan licenses
     */
    public $UnusedAuthorizedCnt;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $RegistryImageCnt Number of unlicensed repository images
     * @param integer $LocalImageCnt Number of unlicensed local images
     * @param integer $UnusedAuthorizedCnt Number of unused image security scan licenses
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("RegistryImageCnt",$param) and $param["RegistryImageCnt"] !== null) {
            $this->RegistryImageCnt = $param["RegistryImageCnt"];
        }

        if (array_key_exists("LocalImageCnt",$param) and $param["LocalImageCnt"] !== null) {
            $this->LocalImageCnt = $param["LocalImageCnt"];
        }

        if (array_key_exists("UnusedAuthorizedCnt",$param) and $param["UnusedAuthorizedCnt"] !== null) {
            $this->UnusedAuthorizedCnt = $param["UnusedAuthorizedCnt"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
