<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Ssl\V20191205\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeHostUpdateRecordDetail response structure.
 *
 * @method integer getTotalCount() Obtain If the total number cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method void setTotalCount(integer $TotalCount) Set If the total number cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method array getRecordDetailList() Obtain Certificate deployment record list; returns an empty array if no value is obtained.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method void setRecordDetailList(array $RecordDetailList) Set Certificate deployment record list; returns an empty array if no value is obtained.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method integer getSuccessTotalCount() Obtain Total number of successes; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method void setSuccessTotalCount(integer $SuccessTotalCount) Set Total number of successes; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method integer getFailedTotalCount() Obtain Total number of failures. if it cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method void setFailedTotalCount(integer $FailedTotalCount) Set Total number of failures. if it cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method integer getRunningTotalCount() Obtain Total number of deployments in progress; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method void setRunningTotalCount(integer $RunningTotalCount) Set Total number of deployments in progress; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeHostUpdateRecordDetailResponse extends AbstractModel
{
    /**
     * @var integer If the total number cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
     */
    public $TotalCount;

    /**
     * @var array Certificate deployment record list; returns an empty array if no value is obtained.
Note: this field may return null, indicating that no valid values can be obtained.
     */
    public $RecordDetailList;

    /**
     * @var integer Total number of successes; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
     */
    public $SuccessTotalCount;

    /**
     * @var integer Total number of failures. if it cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
     */
    public $FailedTotalCount;

    /**
     * @var integer Total number of deployments in progress; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
     */
    public $RunningTotalCount;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount If the total number cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
     * @param array $RecordDetailList Certificate deployment record list; returns an empty array if no value is obtained.
Note: this field may return null, indicating that no valid values can be obtained.
     * @param integer $SuccessTotalCount Total number of successes; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
     * @param integer $FailedTotalCount Total number of failures. if it cannot be obtained, return 0.
Note: this field may return null, indicating that no valid values can be obtained.
     * @param integer $RunningTotalCount Total number of deployments in progress; returns 0 if unavailable.
Note: this field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("RecordDetailList",$param) and $param["RecordDetailList"] !== null) {
            $this->RecordDetailList = [];
            foreach ($param["RecordDetailList"] as $key => $value){
                $obj = new UpdateRecordDetails();
                $obj->deserialize($value);
                array_push($this->RecordDetailList, $obj);
            }
        }

        if (array_key_exists("SuccessTotalCount",$param) and $param["SuccessTotalCount"] !== null) {
            $this->SuccessTotalCount = $param["SuccessTotalCount"];
        }

        if (array_key_exists("FailedTotalCount",$param) and $param["FailedTotalCount"] !== null) {
            $this->FailedTotalCount = $param["FailedTotalCount"];
        }

        if (array_key_exists("RunningTotalCount",$param) and $param["RunningTotalCount"] !== null) {
            $this->RunningTotalCount = $param["RunningTotalCount"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
