<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Csip\V20221121\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeOrganizationUserInfo response structure.
 *
 * @method integer getTotalCount() Obtain Total number of items
 * @method void setTotalCount(integer $TotalCount) Set Total number of items
 * @method array getData() Obtain Group User List
 * @method void setData(array $Data) Set Group User List
 * @method array getJoinTypeLst() Obtain Join method enumeration
 * @method void setJoinTypeLst(array $JoinTypeLst) Set Join method enumeration
 * @method array getCloudTypeLst() Obtain Cloud vendor enumeration
 * @method void setCloudTypeLst(array $CloudTypeLst) Set Cloud vendor enumeration
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeOrganizationUserInfoResponse extends AbstractModel
{
    /**
     * @var integer Total number of items
     */
    public $TotalCount;

    /**
     * @var array Group User List
     */
    public $Data;

    /**
     * @var array Join method enumeration
     */
    public $JoinTypeLst;

    /**
     * @var array Cloud vendor enumeration
     */
    public $CloudTypeLst;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Total number of items
     * @param array $Data Group User List
     * @param array $JoinTypeLst Join method enumeration
     * @param array $CloudTypeLst Cloud vendor enumeration
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("Data",$param) and $param["Data"] !== null) {
            $this->Data = [];
            foreach ($param["Data"] as $key => $value){
                $obj = new OrganizationUserInfo();
                $obj->deserialize($value);
                array_push($this->Data, $obj);
            }
        }

        if (array_key_exists("JoinTypeLst",$param) and $param["JoinTypeLst"] !== null) {
            $this->JoinTypeLst = [];
            foreach ($param["JoinTypeLst"] as $key => $value){
                $obj = new FilterDataObject();
                $obj->deserialize($value);
                array_push($this->JoinTypeLst, $obj);
            }
        }

        if (array_key_exists("CloudTypeLst",$param) and $param["CloudTypeLst"] !== null) {
            $this->CloudTypeLst = [];
            foreach ($param["CloudTypeLst"] as $key => $value){
                $obj = new FilterDataObject();
                $obj->deserialize($value);
                array_push($this->CloudTypeLst, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
