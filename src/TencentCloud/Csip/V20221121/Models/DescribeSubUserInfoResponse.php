<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Csip\V20221121\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSubUserInfo response structure.
 *
 * @method integer getTotalCount() Obtain total
 * @method void setTotalCount(integer $TotalCount) Set total
 * @method array getData() Obtain Sub-user list
 * @method void setData(array $Data) Set Sub-user list
 * @method array getCloudTypeLst() Obtain Manufacturer Enumeration List
 * @method void setCloudTypeLst(array $CloudTypeLst) Set Manufacturer Enumeration List
 * @method array getOwnerAppIDLst() Obtain Enumeration of appid of the main account
 * @method void setOwnerAppIDLst(array $OwnerAppIDLst) Set Enumeration of appid of the main account
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSubUserInfoResponse extends AbstractModel
{
    /**
     * @var integer total
     */
    public $TotalCount;

    /**
     * @var array Sub-user list
     */
    public $Data;

    /**
     * @var array Manufacturer Enumeration List
     */
    public $CloudTypeLst;

    /**
     * @var array Enumeration of appid of the main account
     */
    public $OwnerAppIDLst;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount total
     * @param array $Data Sub-user list
     * @param array $CloudTypeLst Manufacturer Enumeration List
     * @param array $OwnerAppIDLst Enumeration of appid of the main account
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("Data",$param) and $param["Data"] !== null) {
            $this->Data = [];
            foreach ($param["Data"] as $key => $value){
                $obj = new SubUserInfo();
                $obj->deserialize($value);
                array_push($this->Data, $obj);
            }
        }

        if (array_key_exists("CloudTypeLst",$param) and $param["CloudTypeLst"] !== null) {
            $this->CloudTypeLst = [];
            foreach ($param["CloudTypeLst"] as $key => $value){
                $obj = new FilterDataObject();
                $obj->deserialize($value);
                array_push($this->CloudTypeLst, $obj);
            }
        }

        if (array_key_exists("OwnerAppIDLst",$param) and $param["OwnerAppIDLst"] !== null) {
            $this->OwnerAppIDLst = [];
            foreach ($param["OwnerAppIDLst"] as $key => $value){
                $obj = new FilterDataObject();
                $obj->deserialize($value);
                array_push($this->OwnerAppIDLst, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
