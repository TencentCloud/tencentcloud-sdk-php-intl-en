<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Wedata\V20210820\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeRealTimeTaskMetricOverview response structure.
 *
 * @method integer getTotalRecordNumOfRead() Obtain Total Read Records
 * @method void setTotalRecordNumOfRead(integer $TotalRecordNumOfRead) Set Total Read Records
 * @method integer getTotalRecordByteNumOfRead() Obtain Total Read Bytes
 * @method void setTotalRecordByteNumOfRead(integer $TotalRecordByteNumOfRead) Set Total Read Bytes
 * @method integer getTotalRecordNumOfWrite() Obtain Total Write Records
 * @method void setTotalRecordNumOfWrite(integer $TotalRecordNumOfWrite) Set Total Write Records
 * @method integer getTotalRecordByteNumOfWrite() Obtain Total Write Bytes Unit: bytes
 * @method void setTotalRecordByteNumOfWrite(integer $TotalRecordByteNumOfWrite) Set Total Write Bytes Unit: bytes
 * @method integer getTotalDirtyRecordNum() Obtain Total Dirty Record Data
 * @method void setTotalDirtyRecordNum(integer $TotalDirtyRecordNum) Set Total Dirty Record Data
 * @method integer getTotalDirtyRecordByte() Obtain Total Dirty Bytes Unit: bytes
 * @method void setTotalDirtyRecordByte(integer $TotalDirtyRecordByte) Set Total Dirty Bytes Unit: bytes
 * @method integer getTotalDuration() Obtain Execution Duration Unit: s
 * @method void setTotalDuration(integer $TotalDuration) Set Execution Duration Unit: s
 * @method string getBeginRunTime() Obtain Start Running Time
 * @method void setBeginRunTime(string $BeginRunTime) Set Start Running Time
 * @method string getEndRunTime() Obtain Current Running Time
 * @method void setEndRunTime(string $EndRunTime) Set Current Running Time
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeRealTimeTaskMetricOverviewResponse extends AbstractModel
{
    /**
     * @var integer Total Read Records
     */
    public $TotalRecordNumOfRead;

    /**
     * @var integer Total Read Bytes
     */
    public $TotalRecordByteNumOfRead;

    /**
     * @var integer Total Write Records
     */
    public $TotalRecordNumOfWrite;

    /**
     * @var integer Total Write Bytes Unit: bytes
     */
    public $TotalRecordByteNumOfWrite;

    /**
     * @var integer Total Dirty Record Data
     */
    public $TotalDirtyRecordNum;

    /**
     * @var integer Total Dirty Bytes Unit: bytes
     */
    public $TotalDirtyRecordByte;

    /**
     * @var integer Execution Duration Unit: s
     */
    public $TotalDuration;

    /**
     * @var string Start Running Time
     */
    public $BeginRunTime;

    /**
     * @var string Current Running Time
     */
    public $EndRunTime;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalRecordNumOfRead Total Read Records
     * @param integer $TotalRecordByteNumOfRead Total Read Bytes
     * @param integer $TotalRecordNumOfWrite Total Write Records
     * @param integer $TotalRecordByteNumOfWrite Total Write Bytes Unit: bytes
     * @param integer $TotalDirtyRecordNum Total Dirty Record Data
     * @param integer $TotalDirtyRecordByte Total Dirty Bytes Unit: bytes
     * @param integer $TotalDuration Execution Duration Unit: s
     * @param string $BeginRunTime Start Running Time
     * @param string $EndRunTime Current Running Time
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalRecordNumOfRead",$param) and $param["TotalRecordNumOfRead"] !== null) {
            $this->TotalRecordNumOfRead = $param["TotalRecordNumOfRead"];
        }

        if (array_key_exists("TotalRecordByteNumOfRead",$param) and $param["TotalRecordByteNumOfRead"] !== null) {
            $this->TotalRecordByteNumOfRead = $param["TotalRecordByteNumOfRead"];
        }

        if (array_key_exists("TotalRecordNumOfWrite",$param) and $param["TotalRecordNumOfWrite"] !== null) {
            $this->TotalRecordNumOfWrite = $param["TotalRecordNumOfWrite"];
        }

        if (array_key_exists("TotalRecordByteNumOfWrite",$param) and $param["TotalRecordByteNumOfWrite"] !== null) {
            $this->TotalRecordByteNumOfWrite = $param["TotalRecordByteNumOfWrite"];
        }

        if (array_key_exists("TotalDirtyRecordNum",$param) and $param["TotalDirtyRecordNum"] !== null) {
            $this->TotalDirtyRecordNum = $param["TotalDirtyRecordNum"];
        }

        if (array_key_exists("TotalDirtyRecordByte",$param) and $param["TotalDirtyRecordByte"] !== null) {
            $this->TotalDirtyRecordByte = $param["TotalDirtyRecordByte"];
        }

        if (array_key_exists("TotalDuration",$param) and $param["TotalDuration"] !== null) {
            $this->TotalDuration = $param["TotalDuration"];
        }

        if (array_key_exists("BeginRunTime",$param) and $param["BeginRunTime"] !== null) {
            $this->BeginRunTime = $param["BeginRunTime"];
        }

        if (array_key_exists("EndRunTime",$param) and $param["EndRunTime"] !== null) {
            $this->EndRunTime = $param["EndRunTime"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
