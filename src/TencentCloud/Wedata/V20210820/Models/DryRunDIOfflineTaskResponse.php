<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Wedata\V20210820\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DryRunDIOfflineTask response structure.
 *
 * @method string getCurrentRunDate() Obtain Data Timestamp
 * @method void setCurrentRunDate(string $CurrentRunDate) Set Data Timestamp
 * @method string getProjectId() Obtain Project ID
 * @method void setProjectId(string $ProjectId) Set Project ID
 * @method string getStatus() Obtain Task Status
 * @method void setStatus(string $Status) Set Task Status
 * @method string getTaskId() Obtain Task ID
 * @method void setTaskId(string $TaskId) Set Task ID
 * @method string getTaskInstanceKey() Obtain Unique Key for Task Instance
 * @method void setTaskInstanceKey(string $TaskInstanceKey) Set Unique Key for Task Instance
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DryRunDIOfflineTaskResponse extends AbstractModel
{
    /**
     * @var string Data Timestamp
     */
    public $CurrentRunDate;

    /**
     * @var string Project ID
     */
    public $ProjectId;

    /**
     * @var string Task Status
     */
    public $Status;

    /**
     * @var string Task ID
     */
    public $TaskId;

    /**
     * @var string Unique Key for Task Instance
     */
    public $TaskInstanceKey;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $CurrentRunDate Data Timestamp
     * @param string $ProjectId Project ID
     * @param string $Status Task Status
     * @param string $TaskId Task ID
     * @param string $TaskInstanceKey Unique Key for Task Instance
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("CurrentRunDate",$param) and $param["CurrentRunDate"] !== null) {
            $this->CurrentRunDate = $param["CurrentRunDate"];
        }

        if (array_key_exists("ProjectId",$param) and $param["ProjectId"] !== null) {
            $this->ProjectId = $param["ProjectId"];
        }

        if (array_key_exists("Status",$param) and $param["Status"] !== null) {
            $this->Status = $param["Status"];
        }

        if (array_key_exists("TaskId",$param) and $param["TaskId"] !== null) {
            $this->TaskId = $param["TaskId"];
        }

        if (array_key_exists("TaskInstanceKey",$param) and $param["TaskInstanceKey"] !== null) {
            $this->TaskInstanceKey = $param["TaskInstanceKey"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
