<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Wedata\V20210820\Models;
use TencentCloud\Common\AbstractModel;

/**
 * GenHiveTableDDLSql response structure.
 *
 * @method string getDDLSql() Obtain Generated DDL Statement
 * @method void setDDLSql(string $DDLSql) Set Generated DDL Statement
 * @method string getData() Obtain Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
 * @method void setData(string $Data) Set Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class GenHiveTableDDLSqlResponse extends AbstractModel
{
    /**
     * @var string Generated DDL Statement
     */
    public $DDLSql;

    /**
     * @var string Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
     */
    public $Data;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $DDLSql Generated DDL Statement
     * @param string $Data Generated DDL Statement. Same meaning as DDLSql, prioritizing Data. If Data is null, then DDLSql is taken.
Note: This field may return null, indicating that no valid value can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("DDLSql",$param) and $param["DDLSql"] !== null) {
            $this->DDLSql = $param["DDLSql"];
        }

        if (array_key_exists("Data",$param) and $param["Data"] !== null) {
            $this->Data = $param["Data"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
