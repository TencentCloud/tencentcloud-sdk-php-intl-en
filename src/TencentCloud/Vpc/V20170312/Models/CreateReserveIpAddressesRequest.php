<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Vpc\V20170312\Models;
use TencentCloud\Common\AbstractModel;

/**
 * CreateReserveIpAddresses request structure.
 *
 * @method string getVpcId() Obtain Unique ID of the VPC.
 * @method void setVpcId(string $VpcId) Set Unique ID of the VPC.
 * @method array getIpAddresses() Obtain Reserved private IP address to be applied for.
 * @method void setIpAddresses(array $IpAddresses) Set Reserved private IP address to be applied for.
 * @method integer getIpAddressCount() Obtain Number of reserved private IP addresses that can be automatically assigned with no IP address specified.
 * @method void setIpAddressCount(integer $IpAddressCount) Set Number of reserved private IP addresses that can be automatically assigned with no IP address specified.
 * @method string getSubnetId() Obtain Unique ID of the subnet.
 * @method void setSubnetId(string $SubnetId) Set Unique ID of the subnet.
 * @method string getName() Obtain Name of the reserved private IP address.
 * @method void setName(string $Name) Set Name of the reserved private IP address.
 * @method string getDescription() Obtain Description of the reserved private IP address.
 * @method void setDescription(string $Description) Set Description of the reserved private IP address.
 * @method array getTags() Obtain List of tags to be bound, for example, [{"Key": "city", "Value": "shanghai"}].
 * @method void setTags(array $Tags) Set List of tags to be bound, for example, [{"Key": "city", "Value": "shanghai"}].
 * @method string getClientToken() Obtain A string used to ensure the idempotence of the request. This string is generated by the customer and should be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed.
 * @method void setClientToken(string $ClientToken) Set A string used to ensure the idempotence of the request. This string is generated by the customer and should be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed.
 */
class CreateReserveIpAddressesRequest extends AbstractModel
{
    /**
     * @var string Unique ID of the VPC.
     */
    public $VpcId;

    /**
     * @var array Reserved private IP address to be applied for.
     */
    public $IpAddresses;

    /**
     * @var integer Number of reserved private IP addresses that can be automatically assigned with no IP address specified.
     */
    public $IpAddressCount;

    /**
     * @var string Unique ID of the subnet.
     */
    public $SubnetId;

    /**
     * @var string Name of the reserved private IP address.
     */
    public $Name;

    /**
     * @var string Description of the reserved private IP address.
     */
    public $Description;

    /**
     * @var array List of tags to be bound, for example, [{"Key": "city", "Value": "shanghai"}].
     */
    public $Tags;

    /**
     * @var string A string used to ensure the idempotence of the request. This string is generated by the customer and should be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed.
     */
    public $ClientToken;

    /**
     * @param string $VpcId Unique ID of the VPC.
     * @param array $IpAddresses Reserved private IP address to be applied for.
     * @param integer $IpAddressCount Number of reserved private IP addresses that can be automatically assigned with no IP address specified.
     * @param string $SubnetId Unique ID of the subnet.
     * @param string $Name Name of the reserved private IP address.
     * @param string $Description Description of the reserved private IP address.
     * @param array $Tags List of tags to be bound, for example, [{"Key": "city", "Value": "shanghai"}].
     * @param string $ClientToken A string used to ensure the idempotence of the request. This string is generated by the customer and should be unique across different requests, with a maximum length of 64 ASCII characters. If this parameter is not specified, the idempotence of the request cannot be guaranteed.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("VpcId",$param) and $param["VpcId"] !== null) {
            $this->VpcId = $param["VpcId"];
        }

        if (array_key_exists("IpAddresses",$param) and $param["IpAddresses"] !== null) {
            $this->IpAddresses = $param["IpAddresses"];
        }

        if (array_key_exists("IpAddressCount",$param) and $param["IpAddressCount"] !== null) {
            $this->IpAddressCount = $param["IpAddressCount"];
        }

        if (array_key_exists("SubnetId",$param) and $param["SubnetId"] !== null) {
            $this->SubnetId = $param["SubnetId"];
        }

        if (array_key_exists("Name",$param) and $param["Name"] !== null) {
            $this->Name = $param["Name"];
        }

        if (array_key_exists("Description",$param) and $param["Description"] !== null) {
            $this->Description = $param["Description"];
        }

        if (array_key_exists("Tags",$param) and $param["Tags"] !== null) {
            $this->Tags = [];
            foreach ($param["Tags"] as $key => $value){
                $obj = new Tag();
                $obj->deserialize($value);
                array_push($this->Tags, $obj);
            }
        }

        if (array_key_exists("ClientToken",$param) and $param["ClientToken"] !== null) {
            $this->ClientToken = $param["ClientToken"];
        }
    }
}
