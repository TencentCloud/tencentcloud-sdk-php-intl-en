<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Tke\V20180525\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeBatchModifyTagsStatus response structure.
 *
 * @method array getFailedResources() Obtain List of failed resources
Note: This field may return "null", indicating that no valid value can be obtained.
 * @method void setFailedResources(array $FailedResources) Set List of failed resources
Note: This field may return "null", indicating that no valid value can be obtained.
 * @method string getStatus() Obtain Task status:
- running
- failed
- done
Note: This field may return "null", indicating that no valid value can be obtained.
 * @method void setStatus(string $Status) Set Task status:
- running
- failed
- done
Note: This field may return "null", indicating that no valid value can be obtained.
 * @method boolean getSyncSubresource() Obtain Whether to sync the subresource Tag within the cluster
 * @method void setSyncSubresource(boolean $SyncSubresource) Set Whether to sync the subresource Tag within the cluster
 * @method array getTags() Obtain Cluster Tag
 * @method void setTags(array $Tags) Set Cluster Tag
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeBatchModifyTagsStatusResponse extends AbstractModel
{
    /**
     * @var array List of failed resources
Note: This field may return "null", indicating that no valid value can be obtained.
     */
    public $FailedResources;

    /**
     * @var string Task status:
- running
- failed
- done
Note: This field may return "null", indicating that no valid value can be obtained.
     */
    public $Status;

    /**
     * @var boolean Whether to sync the subresource Tag within the cluster
     */
    public $SyncSubresource;

    /**
     * @var array Cluster Tag
     */
    public $Tags;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $FailedResources List of failed resources
Note: This field may return "null", indicating that no valid value can be obtained.
     * @param string $Status Task status:
- running
- failed
- done
Note: This field may return "null", indicating that no valid value can be obtained.
     * @param boolean $SyncSubresource Whether to sync the subresource Tag within the cluster
     * @param array $Tags Cluster Tag
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("FailedResources",$param) and $param["FailedResources"] !== null) {
            $this->FailedResources = [];
            foreach ($param["FailedResources"] as $key => $value){
                $obj = new FailedResource();
                $obj->deserialize($value);
                array_push($this->FailedResources, $obj);
            }
        }

        if (array_key_exists("Status",$param) and $param["Status"] !== null) {
            $this->Status = $param["Status"];
        }

        if (array_key_exists("SyncSubresource",$param) and $param["SyncSubresource"] !== null) {
            $this->SyncSubresource = $param["SyncSubresource"];
        }

        if (array_key_exists("Tags",$param) and $param["Tags"] !== null) {
            $this->Tags = [];
            foreach ($param["Tags"] as $key => $value){
                $obj = new Tag();
                $obj->deserialize($value);
                array_push($this->Tags, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
