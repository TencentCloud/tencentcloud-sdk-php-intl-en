<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeMachineRegions response structure.
 *
 * @method array getCVM() Obtain List of Cloud Virtual Machine regions
 * @method void setCVM(array $CVM) Set List of Cloud Virtual Machine regions
 * @method array getBM() Obtain List of BM machine regions
 * @method void setBM(array $BM) Set List of BM machine regions
 * @method array getLH() Obtain List of Lighthouse regions
 * @method void setLH(array $LH) Set List of Lighthouse regions
 * @method array getECM() Obtain List of Edge Computing Machine regions
 * @method void setECM(array $ECM) Set List of Edge Computing Machine regions
 * @method array getOther() Obtain List of Hybrid Cloud regions
 * @method void setOther(array $Other) Set List of Hybrid Cloud regions
 * @method array getALL() Obtain List of all regions (including above regions)
 * @method void setALL(array $ALL) Set List of all regions (including above regions)
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeMachineRegionsResponse extends AbstractModel
{
    /**
     * @var array List of Cloud Virtual Machine regions
     */
    public $CVM;

    /**
     * @var array List of BM machine regions
     */
    public $BM;

    /**
     * @var array List of Lighthouse regions
     */
    public $LH;

    /**
     * @var array List of Edge Computing Machine regions
     */
    public $ECM;

    /**
     * @var array List of Hybrid Cloud regions
     */
    public $Other;

    /**
     * @var array List of all regions (including above regions)
     */
    public $ALL;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $CVM List of Cloud Virtual Machine regions
     * @param array $BM List of BM machine regions
     * @param array $LH List of Lighthouse regions
     * @param array $ECM List of Edge Computing Machine regions
     * @param array $Other List of Hybrid Cloud regions
     * @param array $ALL List of all regions (including above regions)
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("CVM",$param) and $param["CVM"] !== null) {
            $this->CVM = [];
            foreach ($param["CVM"] as $key => $value){
                $obj = new RegionInfo();
                $obj->deserialize($value);
                array_push($this->CVM, $obj);
            }
        }

        if (array_key_exists("BM",$param) and $param["BM"] !== null) {
            $this->BM = [];
            foreach ($param["BM"] as $key => $value){
                $obj = new RegionInfo();
                $obj->deserialize($value);
                array_push($this->BM, $obj);
            }
        }

        if (array_key_exists("LH",$param) and $param["LH"] !== null) {
            $this->LH = [];
            foreach ($param["LH"] as $key => $value){
                $obj = new RegionInfo();
                $obj->deserialize($value);
                array_push($this->LH, $obj);
            }
        }

        if (array_key_exists("ECM",$param) and $param["ECM"] !== null) {
            $this->ECM = [];
            foreach ($param["ECM"] as $key => $value){
                $obj = new RegionInfo();
                $obj->deserialize($value);
                array_push($this->ECM, $obj);
            }
        }

        if (array_key_exists("Other",$param) and $param["Other"] !== null) {
            $this->Other = [];
            foreach ($param["Other"] as $key => $value){
                $obj = new RegionInfo();
                $obj->deserialize($value);
                array_push($this->Other, $obj);
            }
        }

        if (array_key_exists("ALL",$param) and $param["ALL"] !== null) {
            $this->ALL = [];
            foreach ($param["ALL"] as $key => $value){
                $obj = new RegionInfo();
                $obj->deserialize($value);
                array_push($this->ALL, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
