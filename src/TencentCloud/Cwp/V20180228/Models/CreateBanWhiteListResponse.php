<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * CreateBanWhiteList response structure.
 *
 * @method boolean getIsGlobal() Obtain Whether a global rule
 * @method void setIsGlobal(boolean $IsGlobal) Set Whether a global rule
 * @method boolean getIsDuplicate() Obtain Whether the addition of a rule would result in a duplicate
 * @method void setIsDuplicate(boolean $IsDuplicate) Set Whether the addition of a rule would result in a duplicate
 * @method array getDuplicateHosts() Obtain Information on duplicate machines
 * @method void setDuplicateHosts(array $DuplicateHosts) Set Information on duplicate machines
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class CreateBanWhiteListResponse extends AbstractModel
{
    /**
     * @var boolean Whether a global rule
     */
    public $IsGlobal;

    /**
     * @var boolean Whether the addition of a rule would result in a duplicate
     */
    public $IsDuplicate;

    /**
     * @var array Information on duplicate machines
     */
    public $DuplicateHosts;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param boolean $IsGlobal Whether a global rule
     * @param boolean $IsDuplicate Whether the addition of a rule would result in a duplicate
     * @param array $DuplicateHosts Information on duplicate machines
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("IsGlobal",$param) and $param["IsGlobal"] !== null) {
            $this->IsGlobal = $param["IsGlobal"];
        }

        if (array_key_exists("IsDuplicate",$param) and $param["IsDuplicate"] !== null) {
            $this->IsDuplicate = $param["IsDuplicate"];
        }

        if (array_key_exists("DuplicateHosts",$param) and $param["DuplicateHosts"] !== null) {
            $this->DuplicateHosts = [];
            foreach ($param["DuplicateHosts"] as $key => $value){
                $obj = new DuplicateHosts();
                $obj->deserialize($value);
                array_push($this->DuplicateHosts, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
