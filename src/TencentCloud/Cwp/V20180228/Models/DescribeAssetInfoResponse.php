<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeAssetInfo response structure.
 *
 * @method integer getMachineCount() Obtain Number of Hosts
 * @method void setMachineCount(integer $MachineCount) Set Number of Hosts
 * @method integer getAccountCount() Obtain Number of Accounts
 * @method void setAccountCount(integer $AccountCount) Set Number of Accounts
 * @method integer getPortCount() Obtain Number of ports
 * @method void setPortCount(integer $PortCount) Set Number of ports
 * @method integer getProcessCount() Obtain Number of Processes
 * @method void setProcessCount(integer $ProcessCount) Set Number of Processes
 * @method integer getSoftwareCount() Obtain Number of software
 * @method void setSoftwareCount(integer $SoftwareCount) Set Number of software
 * @method integer getDatabaseCount() Obtain Number of databases
 * @method void setDatabaseCount(integer $DatabaseCount) Set Number of databases
 * @method integer getWebAppCount() Obtain Number of web applications
 * @method void setWebAppCount(integer $WebAppCount) Set Number of web applications
 * @method integer getWebFrameCount() Obtain Number of web frameworks
 * @method void setWebFrameCount(integer $WebFrameCount) Set Number of web frameworks
 * @method integer getWebServiceCount() Obtain Number of web services
 * @method void setWebServiceCount(integer $WebServiceCount) Set Number of web services
 * @method integer getWebLocationCount() Obtain Number of web sites
 * @method void setWebLocationCount(integer $WebLocationCount) Set Number of web sites
 * @method integer getAccountNewCount() Obtain New accounts today
 * @method void setAccountNewCount(integer $AccountNewCount) Set New accounts today
 * @method integer getPortNewCount() Obtain New ports today
 * @method void setPortNewCount(integer $PortNewCount) Set New ports today
 * @method integer getProcessNewCount() Obtain New processes today
 * @method void setProcessNewCount(integer $ProcessNewCount) Set New processes today
 * @method integer getSoftwareNewCount() Obtain New software today
 * @method void setSoftwareNewCount(integer $SoftwareNewCount) Set New software today
 * @method integer getDatabaseNewCount() Obtain New databases today
 * @method void setDatabaseNewCount(integer $DatabaseNewCount) Set New databases today
 * @method integer getWebAppNewCount() Obtain New web applications today
 * @method void setWebAppNewCount(integer $WebAppNewCount) Set New web applications today
 * @method integer getWebFrameNewCount() Obtain New web frameworks today
 * @method void setWebFrameNewCount(integer $WebFrameNewCount) Set New web frameworks today
 * @method integer getWebServiceNewCount() Obtain New web services today
 * @method void setWebServiceNewCount(integer $WebServiceNewCount) Set New web services today
 * @method integer getWebLocationNewCount() Obtain New web sites today
 * @method void setWebLocationNewCount(integer $WebLocationNewCount) Set New web sites today
 * @method integer getMachineNewCount() Obtain New hosts today
 * @method void setMachineNewCount(integer $MachineNewCount) Set New hosts today
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeAssetInfoResponse extends AbstractModel
{
    /**
     * @var integer Number of Hosts
     */
    public $MachineCount;

    /**
     * @var integer Number of Accounts
     */
    public $AccountCount;

    /**
     * @var integer Number of ports
     */
    public $PortCount;

    /**
     * @var integer Number of Processes
     */
    public $ProcessCount;

    /**
     * @var integer Number of software
     */
    public $SoftwareCount;

    /**
     * @var integer Number of databases
     */
    public $DatabaseCount;

    /**
     * @var integer Number of web applications
     */
    public $WebAppCount;

    /**
     * @var integer Number of web frameworks
     */
    public $WebFrameCount;

    /**
     * @var integer Number of web services
     */
    public $WebServiceCount;

    /**
     * @var integer Number of web sites
     */
    public $WebLocationCount;

    /**
     * @var integer New accounts today
     */
    public $AccountNewCount;

    /**
     * @var integer New ports today
     */
    public $PortNewCount;

    /**
     * @var integer New processes today
     */
    public $ProcessNewCount;

    /**
     * @var integer New software today
     */
    public $SoftwareNewCount;

    /**
     * @var integer New databases today
     */
    public $DatabaseNewCount;

    /**
     * @var integer New web applications today
     */
    public $WebAppNewCount;

    /**
     * @var integer New web frameworks today
     */
    public $WebFrameNewCount;

    /**
     * @var integer New web services today
     */
    public $WebServiceNewCount;

    /**
     * @var integer New web sites today
     */
    public $WebLocationNewCount;

    /**
     * @var integer New hosts today
     */
    public $MachineNewCount;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $MachineCount Number of Hosts
     * @param integer $AccountCount Number of Accounts
     * @param integer $PortCount Number of ports
     * @param integer $ProcessCount Number of Processes
     * @param integer $SoftwareCount Number of software
     * @param integer $DatabaseCount Number of databases
     * @param integer $WebAppCount Number of web applications
     * @param integer $WebFrameCount Number of web frameworks
     * @param integer $WebServiceCount Number of web services
     * @param integer $WebLocationCount Number of web sites
     * @param integer $AccountNewCount New accounts today
     * @param integer $PortNewCount New ports today
     * @param integer $ProcessNewCount New processes today
     * @param integer $SoftwareNewCount New software today
     * @param integer $DatabaseNewCount New databases today
     * @param integer $WebAppNewCount New web applications today
     * @param integer $WebFrameNewCount New web frameworks today
     * @param integer $WebServiceNewCount New web services today
     * @param integer $WebLocationNewCount New web sites today
     * @param integer $MachineNewCount New hosts today
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("MachineCount",$param) and $param["MachineCount"] !== null) {
            $this->MachineCount = $param["MachineCount"];
        }

        if (array_key_exists("AccountCount",$param) and $param["AccountCount"] !== null) {
            $this->AccountCount = $param["AccountCount"];
        }

        if (array_key_exists("PortCount",$param) and $param["PortCount"] !== null) {
            $this->PortCount = $param["PortCount"];
        }

        if (array_key_exists("ProcessCount",$param) and $param["ProcessCount"] !== null) {
            $this->ProcessCount = $param["ProcessCount"];
        }

        if (array_key_exists("SoftwareCount",$param) and $param["SoftwareCount"] !== null) {
            $this->SoftwareCount = $param["SoftwareCount"];
        }

        if (array_key_exists("DatabaseCount",$param) and $param["DatabaseCount"] !== null) {
            $this->DatabaseCount = $param["DatabaseCount"];
        }

        if (array_key_exists("WebAppCount",$param) and $param["WebAppCount"] !== null) {
            $this->WebAppCount = $param["WebAppCount"];
        }

        if (array_key_exists("WebFrameCount",$param) and $param["WebFrameCount"] !== null) {
            $this->WebFrameCount = $param["WebFrameCount"];
        }

        if (array_key_exists("WebServiceCount",$param) and $param["WebServiceCount"] !== null) {
            $this->WebServiceCount = $param["WebServiceCount"];
        }

        if (array_key_exists("WebLocationCount",$param) and $param["WebLocationCount"] !== null) {
            $this->WebLocationCount = $param["WebLocationCount"];
        }

        if (array_key_exists("AccountNewCount",$param) and $param["AccountNewCount"] !== null) {
            $this->AccountNewCount = $param["AccountNewCount"];
        }

        if (array_key_exists("PortNewCount",$param) and $param["PortNewCount"] !== null) {
            $this->PortNewCount = $param["PortNewCount"];
        }

        if (array_key_exists("ProcessNewCount",$param) and $param["ProcessNewCount"] !== null) {
            $this->ProcessNewCount = $param["ProcessNewCount"];
        }

        if (array_key_exists("SoftwareNewCount",$param) and $param["SoftwareNewCount"] !== null) {
            $this->SoftwareNewCount = $param["SoftwareNewCount"];
        }

        if (array_key_exists("DatabaseNewCount",$param) and $param["DatabaseNewCount"] !== null) {
            $this->DatabaseNewCount = $param["DatabaseNewCount"];
        }

        if (array_key_exists("WebAppNewCount",$param) and $param["WebAppNewCount"] !== null) {
            $this->WebAppNewCount = $param["WebAppNewCount"];
        }

        if (array_key_exists("WebFrameNewCount",$param) and $param["WebFrameNewCount"] !== null) {
            $this->WebFrameNewCount = $param["WebFrameNewCount"];
        }

        if (array_key_exists("WebServiceNewCount",$param) and $param["WebServiceNewCount"] !== null) {
            $this->WebServiceNewCount = $param["WebServiceNewCount"];
        }

        if (array_key_exists("WebLocationNewCount",$param) and $param["WebLocationNewCount"] !== null) {
            $this->WebLocationNewCount = $param["WebLocationNewCount"];
        }

        if (array_key_exists("MachineNewCount",$param) and $param["MachineNewCount"] !== null) {
            $this->MachineNewCount = $param["MachineNewCount"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
