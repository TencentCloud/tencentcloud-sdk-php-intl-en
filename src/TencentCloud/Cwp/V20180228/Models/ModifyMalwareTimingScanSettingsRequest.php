<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * ModifyMalwareTimingScanSettings request structure.
 *
 * @method integer getCheckPattern() Obtain Detection mode. 0: full disk detection; 1: rapid detection
 * @method void setCheckPattern(integer $CheckPattern) Set Detection mode. 0: full disk detection; 1: rapid detection
 * @method string getStartTime() Obtain Detection interval start time, such as 02:00:00
 * @method void setStartTime(string $StartTime) Set Detection interval start time, such as 02:00:00
 * @method string getEndTime() Obtain Detection interval timeout end time, such as 04:00:00
 * @method void setEndTime(string $EndTime) Set Detection interval timeout end time, such as 04:00:00
 * @method integer getIsGlobal() Obtain Whether all servers. 1: all; 2: specified
 * @method void setIsGlobal(integer $IsGlobal) Set Whether all servers. 1: all; 2: specified
 * @method integer getEnableScan() Obtain Regular detection switch. 0: off; 1: on
 * @method void setEnableScan(integer $EnableScan) Set Regular detection switch. 0: off; 1: on
 * @method integer getMonitoringPattern() Obtain Monitoring mode. 0: standard; 1: deep
 * @method void setMonitoringPattern(integer $MonitoringPattern) Set Monitoring mode. 0: standard; 1: deep
 * @method integer getCycle() Obtain Scan interval: defaults to 1 per day
 * @method void setCycle(integer $Cycle) Set Scan interval: defaults to 1 per day
 * @method integer getRealTimeMonitoring() Obtain Real-time monitoring. 0: off; 1: on
 * @method void setRealTimeMonitoring(integer $RealTimeMonitoring) Set Real-time monitoring. 0: off; 1: on
 * @method array getQuuidList() Obtain Required for specified servers, a string array of host QUUIDs
 * @method void setQuuidList(array $QuuidList) Set Required for specified servers, a string array of host QUUIDs
 * @method integer getAutoIsolation() Obtain Whether to apply automatic isolation. 1: yes; 0: no
 * @method void setAutoIsolation(integer $AutoIsolation) Set Whether to apply automatic isolation. 1: yes; 0: no
 * @method integer getKillProcess() Obtain Whether to terminate the process. 1: terminate; 0: not terminate
 * @method void setKillProcess(integer $KillProcess) Set Whether to terminate the process. 1: terminate; 0: not terminate
 * @method integer getDoClean() Obtain 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
 * @method void setDoClean(integer $DoClean) Set 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
 * @method integer getEngineType() Obtain 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
 * @method void setEngineType(integer $EngineType) Set 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
 * @method integer getEnableInspiredEngine() Obtain Heuristic Engine Switch: 0 OFF, 1 ON.
 * @method void setEnableInspiredEngine(integer $EnableInspiredEngine) Set Heuristic Engine Switch: 0 OFF, 1 ON.
 * @method integer getEnableMemShellScan() Obtain Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
 * @method void setEnableMemShellScan(integer $EnableMemShellScan) Set Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
 * @method integer getProtectMode() Obtain Protection mode: 0: standard; 1: important period guarantee
 * @method void setProtectMode(integer $ProtectMode) Set Protection mode: 0: standard; 1: important period guarantee
 * @method integer getProtectFileScope() Obtain Scope of detection: 0: malicious files other than scripts; 1: all malicious files
 * @method void setProtectFileScope(integer $ProtectFileScope) Set Scope of detection: 0: malicious files other than scripts; 1: all malicious files
 */
class ModifyMalwareTimingScanSettingsRequest extends AbstractModel
{
    /**
     * @var integer Detection mode. 0: full disk detection; 1: rapid detection
     */
    public $CheckPattern;

    /**
     * @var string Detection interval start time, such as 02:00:00
     */
    public $StartTime;

    /**
     * @var string Detection interval timeout end time, such as 04:00:00
     */
    public $EndTime;

    /**
     * @var integer Whether all servers. 1: all; 2: specified
     */
    public $IsGlobal;

    /**
     * @var integer Regular detection switch. 0: off; 1: on
     */
    public $EnableScan;

    /**
     * @var integer Monitoring mode. 0: standard; 1: deep
     */
    public $MonitoringPattern;

    /**
     * @var integer Scan interval: defaults to 1 per day
     */
    public $Cycle;

    /**
     * @var integer Real-time monitoring. 0: off; 1: on
     */
    public $RealTimeMonitoring;

    /**
     * @var array Required for specified servers, a string array of host QUUIDs
     */
    public $QuuidList;

    /**
     * @var integer Whether to apply automatic isolation. 1: yes; 0: no
     */
    public $AutoIsolation;

    /**
     * @var integer Whether to terminate the process. 1: terminate; 0: not terminate
     */
    public $KillProcess;

    /**
     * @var integer 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
     */
    public $DoClean;

    /**
     * @var integer 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
     */
    public $EngineType;

    /**
     * @var integer Heuristic Engine Switch: 0 OFF, 1 ON.
     */
    public $EnableInspiredEngine;

    /**
     * @var integer Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
     */
    public $EnableMemShellScan;

    /**
     * @var integer Protection mode: 0: standard; 1: important period guarantee
     */
    public $ProtectMode;

    /**
     * @var integer Scope of detection: 0: malicious files other than scripts; 1: all malicious files
     */
    public $ProtectFileScope;

    /**
     * @param integer $CheckPattern Detection mode. 0: full disk detection; 1: rapid detection
     * @param string $StartTime Detection interval start time, such as 02:00:00
     * @param string $EndTime Detection interval timeout end time, such as 04:00:00
     * @param integer $IsGlobal Whether all servers. 1: all; 2: specified
     * @param integer $EnableScan Regular detection switch. 0: off; 1: on
     * @param integer $MonitoringPattern Monitoring mode. 0: standard; 1: deep
     * @param integer $Cycle Scan interval: defaults to 1 per day
     * @param integer $RealTimeMonitoring Real-time monitoring. 0: off; 1: on
     * @param array $QuuidList Required for specified servers, a string array of host QUUIDs
     * @param integer $AutoIsolation Whether to apply automatic isolation. 1: yes; 0: no
     * @param integer $KillProcess Whether to terminate the process. 1: terminate; 0: not terminate
     * @param integer $DoClean 1: clean up; 0: not clean up
<li>This operation will fix tampered system commands, scheduled tasks, and other system files. Please ensure that yum/apt is available during the operation.</li>
     * @param integer $EngineType 1: standard mode (only critical and high-risk are reported.); 2: enhanced mode (critical, high-risk, and medium-risk are reported.); 3: strict mode (critical, high-risk, medium-risk, low-risk, and prompt are reported.)
     * @param integer $EnableInspiredEngine Heuristic Engine Switch: 0 OFF, 1 ON.
     * @param integer $EnableMemShellScan Whether to enable malicious process killing [0: Not Enabled; 1: Enabled]
     * @param integer $ProtectMode Protection mode: 0: standard; 1: important period guarantee
     * @param integer $ProtectFileScope Scope of detection: 0: malicious files other than scripts; 1: all malicious files
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("CheckPattern",$param) and $param["CheckPattern"] !== null) {
            $this->CheckPattern = $param["CheckPattern"];
        }

        if (array_key_exists("StartTime",$param) and $param["StartTime"] !== null) {
            $this->StartTime = $param["StartTime"];
        }

        if (array_key_exists("EndTime",$param) and $param["EndTime"] !== null) {
            $this->EndTime = $param["EndTime"];
        }

        if (array_key_exists("IsGlobal",$param) and $param["IsGlobal"] !== null) {
            $this->IsGlobal = $param["IsGlobal"];
        }

        if (array_key_exists("EnableScan",$param) and $param["EnableScan"] !== null) {
            $this->EnableScan = $param["EnableScan"];
        }

        if (array_key_exists("MonitoringPattern",$param) and $param["MonitoringPattern"] !== null) {
            $this->MonitoringPattern = $param["MonitoringPattern"];
        }

        if (array_key_exists("Cycle",$param) and $param["Cycle"] !== null) {
            $this->Cycle = $param["Cycle"];
        }

        if (array_key_exists("RealTimeMonitoring",$param) and $param["RealTimeMonitoring"] !== null) {
            $this->RealTimeMonitoring = $param["RealTimeMonitoring"];
        }

        if (array_key_exists("QuuidList",$param) and $param["QuuidList"] !== null) {
            $this->QuuidList = $param["QuuidList"];
        }

        if (array_key_exists("AutoIsolation",$param) and $param["AutoIsolation"] !== null) {
            $this->AutoIsolation = $param["AutoIsolation"];
        }

        if (array_key_exists("KillProcess",$param) and $param["KillProcess"] !== null) {
            $this->KillProcess = $param["KillProcess"];
        }

        if (array_key_exists("DoClean",$param) and $param["DoClean"] !== null) {
            $this->DoClean = $param["DoClean"];
        }

        if (array_key_exists("EngineType",$param) and $param["EngineType"] !== null) {
            $this->EngineType = $param["EngineType"];
        }

        if (array_key_exists("EnableInspiredEngine",$param) and $param["EnableInspiredEngine"] !== null) {
            $this->EnableInspiredEngine = $param["EnableInspiredEngine"];
        }

        if (array_key_exists("EnableMemShellScan",$param) and $param["EnableMemShellScan"] !== null) {
            $this->EnableMemShellScan = $param["EnableMemShellScan"];
        }

        if (array_key_exists("ProtectMode",$param) and $param["ProtectMode"] !== null) {
            $this->ProtectMode = $param["ProtectMode"];
        }

        if (array_key_exists("ProtectFileScope",$param) and $param["ProtectFileScope"] !== null) {
            $this->ProtectFileScope = $param["ProtectFileScope"];
        }
    }
}
