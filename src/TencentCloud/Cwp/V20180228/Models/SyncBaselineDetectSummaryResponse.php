<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * SyncBaselineDetectSummary response structure.
 *
 * @method integer getProgressRate() Obtain Processing progress
 * @method void setProgressRate(integer $ProgressRate) Set Processing progress
 * @method integer getNotPassPolicyCount() Obtain Total number of failed policies
 * @method void setNotPassPolicyCount(integer $NotPassPolicyCount) Set Total number of failed policies
 * @method integer getHostCount() Obtain Total number of hosts
 * @method void setHostCount(integer $HostCount) Set Total number of hosts
 * @method string getStartTime() Obtain Start time
 * @method void setStartTime(string $StartTime) Set Start time
 * @method string getEndTime() Obtain End time
 * @method void setEndTime(string $EndTime) Set End time
 * @method integer getWillFirstScan() Obtain 1: first scan about to start; 0: already scanned.
 * @method void setWillFirstScan(integer $WillFirstScan) Set 1: first scan about to start; 0: already scanned.
 * @method array getDetectingTaskIds() Obtain ID of ongoing detection task
 * @method void setDetectingTaskIds(array $DetectingTaskIds) Set ID of ongoing detection task
 * @method integer getLeftMins() Obtain Remaining scanning time (minutes)
 * @method void setLeftMins(integer $LeftMins) Set Remaining scanning time (minutes)
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class SyncBaselineDetectSummaryResponse extends AbstractModel
{
    /**
     * @var integer Processing progress
     */
    public $ProgressRate;

    /**
     * @var integer Total number of failed policies
     */
    public $NotPassPolicyCount;

    /**
     * @var integer Total number of hosts
     */
    public $HostCount;

    /**
     * @var string Start time
     */
    public $StartTime;

    /**
     * @var string End time
     */
    public $EndTime;

    /**
     * @var integer 1: first scan about to start; 0: already scanned.
     */
    public $WillFirstScan;

    /**
     * @var array ID of ongoing detection task
     */
    public $DetectingTaskIds;

    /**
     * @var integer Remaining scanning time (minutes)
     */
    public $LeftMins;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $ProgressRate Processing progress
     * @param integer $NotPassPolicyCount Total number of failed policies
     * @param integer $HostCount Total number of hosts
     * @param string $StartTime Start time
     * @param string $EndTime End time
     * @param integer $WillFirstScan 1: first scan about to start; 0: already scanned.
     * @param array $DetectingTaskIds ID of ongoing detection task
     * @param integer $LeftMins Remaining scanning time (minutes)
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("ProgressRate",$param) and $param["ProgressRate"] !== null) {
            $this->ProgressRate = $param["ProgressRate"];
        }

        if (array_key_exists("NotPassPolicyCount",$param) and $param["NotPassPolicyCount"] !== null) {
            $this->NotPassPolicyCount = $param["NotPassPolicyCount"];
        }

        if (array_key_exists("HostCount",$param) and $param["HostCount"] !== null) {
            $this->HostCount = $param["HostCount"];
        }

        if (array_key_exists("StartTime",$param) and $param["StartTime"] !== null) {
            $this->StartTime = $param["StartTime"];
        }

        if (array_key_exists("EndTime",$param) and $param["EndTime"] !== null) {
            $this->EndTime = $param["EndTime"];
        }

        if (array_key_exists("WillFirstScan",$param) and $param["WillFirstScan"] !== null) {
            $this->WillFirstScan = $param["WillFirstScan"];
        }

        if (array_key_exists("DetectingTaskIds",$param) and $param["DetectingTaskIds"] !== null) {
            $this->DetectingTaskIds = $param["DetectingTaskIds"];
        }

        if (array_key_exists("LeftMins",$param) and $param["LeftMins"] !== null) {
            $this->LeftMins = $param["LeftMins"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
