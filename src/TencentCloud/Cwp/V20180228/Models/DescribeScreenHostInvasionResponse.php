<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeScreenHostInvasion response structure.
 *
 * @method array getDefendAttackLog() Obtain List of network attack event
 * @method void setDefendAttackLog(array $DefendAttackLog) Set List of network attack event
 * @method array getInvasionEvents() Obtain List of intrusion detection event
 * @method void setInvasionEvents(array $InvasionEvents) Set List of intrusion detection event
 * @method array getVul() Obtain List of vulnerability event
 * @method void setVul(array $Vul) Set List of vulnerability event
 * @method array getBaseline() Obtain List of baseline event
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setBaseline(array $Baseline) Set List of baseline event
Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeScreenHostInvasionResponse extends AbstractModel
{
    /**
     * @var array List of network attack event
     */
    public $DefendAttackLog;

    /**
     * @var array List of intrusion detection event
     */
    public $InvasionEvents;

    /**
     * @var array List of vulnerability event
     */
    public $Vul;

    /**
     * @var array List of baseline event
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $Baseline;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $DefendAttackLog List of network attack event
     * @param array $InvasionEvents List of intrusion detection event
     * @param array $Vul List of vulnerability event
     * @param array $Baseline List of baseline event
Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("DefendAttackLog",$param) and $param["DefendAttackLog"] !== null) {
            $this->DefendAttackLog = [];
            foreach ($param["DefendAttackLog"] as $key => $value){
                $obj = new ScreenDefendAttackLog();
                $obj->deserialize($value);
                array_push($this->DefendAttackLog, $obj);
            }
        }

        if (array_key_exists("InvasionEvents",$param) and $param["InvasionEvents"] !== null) {
            $this->InvasionEvents = [];
            foreach ($param["InvasionEvents"] as $key => $value){
                $obj = new ScreenInvasion();
                $obj->deserialize($value);
                array_push($this->InvasionEvents, $obj);
            }
        }

        if (array_key_exists("Vul",$param) and $param["Vul"] !== null) {
            $this->Vul = [];
            foreach ($param["Vul"] as $key => $value){
                $obj = new ScreenVulInfo();
                $obj->deserialize($value);
                array_push($this->Vul, $obj);
            }
        }

        if (array_key_exists("Baseline",$param) and $param["Baseline"] !== null) {
            $this->Baseline = [];
            foreach ($param["Baseline"] as $key => $value){
                $obj = new ScreenBaselineInfo();
                $obj->deserialize($value);
                array_push($this->Baseline, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
