<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeMachineRiskCnt response structure.
 *
 * @method integer getHostLogin() Obtain Cross-region log-in
 * @method void setHostLogin(integer $HostLogin) Set Cross-region log-in
 * @method integer getBruteAttack() Obtain Password cracking
 * @method void setBruteAttack(integer $BruteAttack) Set Password cracking
 * @method integer getMaliciousRequest() Obtain Malicious request
 * @method void setMaliciousRequest(integer $MaliciousRequest) Set Malicious request
 * @method integer getReverseShell() Obtain Reverse Shell
 * @method void setReverseShell(integer $ReverseShell) Set Reverse Shell
 * @method integer getBash() Obtain High-risk command
 * @method void setBash(integer $Bash) Set High-risk command
 * @method integer getPrivilegeEscalation() Obtain Local privilege escalation
 * @method void setPrivilegeEscalation(integer $PrivilegeEscalation) Set Local privilege escalation
 * @method integer getMalware() Obtain Trojan
 * @method void setMalware(integer $Malware) Set Trojan
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeMachineRiskCntResponse extends AbstractModel
{
    /**
     * @var integer Cross-region log-in
     */
    public $HostLogin;

    /**
     * @var integer Password cracking
     */
    public $BruteAttack;

    /**
     * @var integer Malicious request
     */
    public $MaliciousRequest;

    /**
     * @var integer Reverse Shell
     */
    public $ReverseShell;

    /**
     * @var integer High-risk command
     */
    public $Bash;

    /**
     * @var integer Local privilege escalation
     */
    public $PrivilegeEscalation;

    /**
     * @var integer Trojan
     */
    public $Malware;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $HostLogin Cross-region log-in
     * @param integer $BruteAttack Password cracking
     * @param integer $MaliciousRequest Malicious request
     * @param integer $ReverseShell Reverse Shell
     * @param integer $Bash High-risk command
     * @param integer $PrivilegeEscalation Local privilege escalation
     * @param integer $Malware Trojan
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("HostLogin",$param) and $param["HostLogin"] !== null) {
            $this->HostLogin = $param["HostLogin"];
        }

        if (array_key_exists("BruteAttack",$param) and $param["BruteAttack"] !== null) {
            $this->BruteAttack = $param["BruteAttack"];
        }

        if (array_key_exists("MaliciousRequest",$param) and $param["MaliciousRequest"] !== null) {
            $this->MaliciousRequest = $param["MaliciousRequest"];
        }

        if (array_key_exists("ReverseShell",$param) and $param["ReverseShell"] !== null) {
            $this->ReverseShell = $param["ReverseShell"];
        }

        if (array_key_exists("Bash",$param) and $param["Bash"] !== null) {
            $this->Bash = $param["Bash"];
        }

        if (array_key_exists("PrivilegeEscalation",$param) and $param["PrivilegeEscalation"] !== null) {
            $this->PrivilegeEscalation = $param["PrivilegeEscalation"];
        }

        if (array_key_exists("Malware",$param) and $param["Malware"] !== null) {
            $this->Malware = $param["Malware"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
