<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cwp\V20180228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeBanMode response structure.
 *
 * @method string getMode() Obtain Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
 * @method void setMode(string $Mode) Set Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
 * @method StandardModeConfig getStandardModeConfig() Obtain Configuration of the standard blocking mode
 * @method void setStandardModeConfig(StandardModeConfig $StandardModeConfig) Set Configuration of the standard blocking mode
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeBanModeResponse extends AbstractModel
{
    /**
     * @var string Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
     */
    public $Mode;

    /**
     * @var StandardModeConfig Configuration of the standard blocking mode
     */
    public $StandardModeConfig;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $Mode Blocking mode. STANDARD_MODE: standard mode; DEEP_MODE: deep mode.
     * @param StandardModeConfig $StandardModeConfig Configuration of the standard blocking mode
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Mode",$param) and $param["Mode"] !== null) {
            $this->Mode = $param["Mode"];
        }

        if (array_key_exists("StandardModeConfig",$param) and $param["StandardModeConfig"] !== null) {
            $this->StandardModeConfig = new StandardModeConfig();
            $this->StandardModeConfig->deserialize($param["StandardModeConfig"]);
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
