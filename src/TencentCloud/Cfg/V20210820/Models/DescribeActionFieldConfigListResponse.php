<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cfg\V20210820\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeActionFieldConfigList response structure.
 *
 * @method array getCommon() Obtain List of general filed configuration parameters
 * @method void setCommon(array $Common) Set List of general filed configuration parameters
 * @method array getResults() Obtain List of action filed configuration parameters
 * @method void setResults(array $Results) Set List of action filed configuration parameters
 * @method array getResourceOffline() Obtain Information on the decommissioned resource
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setResourceOffline(array $ResourceOffline) Set Information on the decommissioned resource
Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeActionFieldConfigListResponse extends AbstractModel
{
    /**
     * @var array List of general filed configuration parameters
     */
    public $Common;

    /**
     * @var array List of action filed configuration parameters
     */
    public $Results;

    /**
     * @var array Information on the decommissioned resource
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $ResourceOffline;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $Common List of general filed configuration parameters
     * @param array $Results List of action filed configuration parameters
     * @param array $ResourceOffline Information on the decommissioned resource
Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Common",$param) and $param["Common"] !== null) {
            $this->Common = [];
            foreach ($param["Common"] as $key => $value){
                $obj = new ActionFieldConfigResult();
                $obj->deserialize($value);
                array_push($this->Common, $obj);
            }
        }

        if (array_key_exists("Results",$param) and $param["Results"] !== null) {
            $this->Results = [];
            foreach ($param["Results"] as $key => $value){
                $obj = new ActionFieldConfigResult();
                $obj->deserialize($value);
                array_push($this->Results, $obj);
            }
        }

        if (array_key_exists("ResourceOffline",$param) and $param["ResourceOffline"] !== null) {
            $this->ResourceOffline = [];
            foreach ($param["ResourceOffline"] as $key => $value){
                $obj = new ResourceOffline();
                $obj->deserialize($value);
                array_push($this->ResourceOffline, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
