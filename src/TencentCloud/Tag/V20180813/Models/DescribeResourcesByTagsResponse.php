<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Tag\V20180813\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeResourcesByTags response structure.
 *
 * @method integer getTotalCount() Obtain Total number of results.
 * @method void setTotalCount(integer $TotalCount) Set Total number of results.
 * @method integer getOffset() Obtain Data offset.
 * @method void setOffset(integer $Offset) Set Data offset.
 * @method integer getLimit() Obtain Number of entries per page.
Note: This field may return null, indicating that no valid value is found.
 * @method void setLimit(integer $Limit) Set Number of entries per page.
Note: This field may return null, indicating that no valid value is found.
 * @method array getRows() Obtain Resource tag.
 * @method void setRows(array $Rows) Set Resource tag.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeResourcesByTagsResponse extends AbstractModel
{
    /**
     * @var integer Total number of results.
     */
    public $TotalCount;

    /**
     * @var integer Data offset.
     */
    public $Offset;

    /**
     * @var integer Number of entries per page.
Note: This field may return null, indicating that no valid value is found.
     */
    public $Limit;

    /**
     * @var array Resource tag.
     */
    public $Rows;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Total number of results.
     * @param integer $Offset Data offset.
     * @param integer $Limit Number of entries per page.
Note: This field may return null, indicating that no valid value is found.
     * @param array $Rows Resource tag.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("Offset",$param) and $param["Offset"] !== null) {
            $this->Offset = $param["Offset"];
        }

        if (array_key_exists("Limit",$param) and $param["Limit"] !== null) {
            $this->Limit = $param["Limit"];
        }

        if (array_key_exists("Rows",$param) and $param["Rows"] !== null) {
            $this->Rows = [];
            foreach ($param["Rows"] as $key => $value){
                $obj = new ResourceTag();
                $obj->deserialize($value);
                array_push($this->Rows, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
