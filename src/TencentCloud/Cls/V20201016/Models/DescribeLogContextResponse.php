<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cls\V20201016\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeLogContext response structure.
 *
 * @method array getLogContextInfos() Obtain Log context information set
 * @method void setLogContextInfos(array $LogContextInfos) Set Log context information set
 * @method boolean getPrevOver() Obtain Whether the previous logs have been fully returned (PrevOver is false indicates that some previous logs are yet to be returned).
 * @method void setPrevOver(boolean $PrevOver) Set Whether the previous logs have been fully returned (PrevOver is false indicates that some previous logs are yet to be returned).
 * @method boolean getNextOver() Obtain Whether the subsequent logs have been fully returned (NextOver is false indicates that some subsequent logs are yet to be returned).
 * @method void setNextOver(boolean $NextOver) Set Whether the subsequent logs have been fully returned (NextOver is false indicates that some subsequent logs are yet to be returned).
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeLogContextResponse extends AbstractModel
{
    /**
     * @var array Log context information set
     */
    public $LogContextInfos;

    /**
     * @var boolean Whether the previous logs have been fully returned (PrevOver is false indicates that some previous logs are yet to be returned).
     */
    public $PrevOver;

    /**
     * @var boolean Whether the subsequent logs have been fully returned (NextOver is false indicates that some subsequent logs are yet to be returned).
     */
    public $NextOver;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $LogContextInfos Log context information set
     * @param boolean $PrevOver Whether the previous logs have been fully returned (PrevOver is false indicates that some previous logs are yet to be returned).
     * @param boolean $NextOver Whether the subsequent logs have been fully returned (NextOver is false indicates that some subsequent logs are yet to be returned).
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("LogContextInfos",$param) and $param["LogContextInfos"] !== null) {
            $this->LogContextInfos = [];
            foreach ($param["LogContextInfos"] as $key => $value){
                $obj = new LogContextInfo();
                $obj->deserialize($value);
                array_push($this->LogContextInfos, $obj);
            }
        }

        if (array_key_exists("PrevOver",$param) and $param["PrevOver"] !== null) {
            $this->PrevOver = $param["PrevOver"];
        }

        if (array_key_exists("NextOver",$param) and $param["NextOver"] !== null) {
            $this->NextOver = $param["NextOver"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
