<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cls\V20201016\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeLogHistogram response structure.
 *
 * @method integer getInterval() Obtain Statistical period in milliseconds
 * @method void setInterval(integer $Interval) Set Statistical period in milliseconds
 * @method integer getTotalCount() Obtain The number of logs that hit the keywords
 * @method void setTotalCount(integer $TotalCount) Set The number of logs that hit the keywords
 * @method array getHistogramInfos() Obtain Statistical result details within the period
 * @method void setHistogramInfos(array $HistogramInfos) Set Statistical result details within the period
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeLogHistogramResponse extends AbstractModel
{
    /**
     * @var integer Statistical period in milliseconds
     */
    public $Interval;

    /**
     * @var integer The number of logs that hit the keywords
     */
    public $TotalCount;

    /**
     * @var array Statistical result details within the period
     */
    public $HistogramInfos;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $Interval Statistical period in milliseconds
     * @param integer $TotalCount The number of logs that hit the keywords
     * @param array $HistogramInfos Statistical result details within the period
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Interval",$param) and $param["Interval"] !== null) {
            $this->Interval = $param["Interval"];
        }

        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("HistogramInfos",$param) and $param["HistogramInfos"] !== null) {
            $this->HistogramInfos = [];
            foreach ($param["HistogramInfos"] as $key => $value){
                $obj = new HistogramInfo();
                $obj->deserialize($value);
                array_push($this->HistogramInfos, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
