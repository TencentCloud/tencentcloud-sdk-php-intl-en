<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Gwlb\V20240906\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeTargetGroupInstances response structure.
 *
 * @method integer getTotalCount() Obtain Number of results returned for the current query.
 * @method void setTotalCount(integer $TotalCount) Set Number of results returned for the current query.
 * @method array getTargetGroupInstanceSet() Obtain Information on bound server.
 * @method void setTargetGroupInstanceSet(array $TargetGroupInstanceSet) Set Information on bound server.
 * @method integer getRealCount() Obtain Actual statistical quantity, which is not affected by Limit, Offset, or CAM.
 * @method void setRealCount(integer $RealCount) Set Actual statistical quantity, which is not affected by Limit, Offset, or CAM.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeTargetGroupInstancesResponse extends AbstractModel
{
    /**
     * @var integer Number of results returned for the current query.
     */
    public $TotalCount;

    /**
     * @var array Information on bound server.
     */
    public $TargetGroupInstanceSet;

    /**
     * @var integer Actual statistical quantity, which is not affected by Limit, Offset, or CAM.
     */
    public $RealCount;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Number of results returned for the current query.
     * @param array $TargetGroupInstanceSet Information on bound server.
     * @param integer $RealCount Actual statistical quantity, which is not affected by Limit, Offset, or CAM.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("TargetGroupInstanceSet",$param) and $param["TargetGroupInstanceSet"] !== null) {
            $this->TargetGroupInstanceSet = [];
            foreach ($param["TargetGroupInstanceSet"] as $key => $value){
                $obj = new TargetGroupBackend();
                $obj->deserialize($value);
                array_push($this->TargetGroupInstanceSet, $obj);
            }
        }

        if (array_key_exists("RealCount",$param) and $param["RealCount"] !== null) {
            $this->RealCount = $param["RealCount"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
