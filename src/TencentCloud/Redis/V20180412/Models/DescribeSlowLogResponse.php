<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Redis\V20180412\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSlowLog response structure.
 *
 * @method integer getTotalCount() Obtain Total number of slow queries
 * @method void setTotalCount(integer $TotalCount) Set Total number of slow queries
 * @method array getInstanceSlowlogDetail() Obtain Slow query log details. This parameter has been deprecated and will be replaced by InstanceSlowLogDetail because it is not properly named.
 * @method void setInstanceSlowlogDetail(array $InstanceSlowlogDetail) Set Slow query log details. This parameter has been deprecated and will be replaced by InstanceSlowLogDetail because it is not properly named.
 * @method array getInstanceSlowLogDetail() Obtain Details of slow queries.
 * @method void setInstanceSlowLogDetail(array $InstanceSlowLogDetail) Set Details of slow queries.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSlowLogResponse extends AbstractModel
{
    /**
     * @var integer Total number of slow queries
     */
    public $TotalCount;

    /**
     * @var array Slow query log details. This parameter has been deprecated and will be replaced by InstanceSlowLogDetail because it is not properly named.
     * @deprecated
     */
    public $InstanceSlowlogDetail;

    /**
     * @var array Details of slow queries.
     */
    public $InstanceSlowLogDetail;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Total number of slow queries
     * @param array $InstanceSlowlogDetail Slow query log details. This parameter has been deprecated and will be replaced by InstanceSlowLogDetail because it is not properly named.
     * @param array $InstanceSlowLogDetail Details of slow queries.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("InstanceSlowlogDetail",$param) and $param["InstanceSlowlogDetail"] !== null) {
            $this->InstanceSlowlogDetail = [];
            foreach ($param["InstanceSlowlogDetail"] as $key => $value){
                $obj = new InstanceSlowlogDetail();
                $obj->deserialize($value);
                array_push($this->InstanceSlowlogDetail, $obj);
            }
        }

        if (array_key_exists("InstanceSlowLogDetail",$param) and $param["InstanceSlowLogDetail"] !== null) {
            $this->InstanceSlowLogDetail = [];
            foreach ($param["InstanceSlowLogDetail"] as $key => $value){
                $obj = new InstanceSlowlogDetail();
                $obj->deserialize($value);
                array_push($this->InstanceSlowLogDetail, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
