<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Redis\V20180412\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSecondLevelBackupInfo response structure.
 *
 * @method string getBackupId() Obtain Backup record ID.
 * @method void setBackupId(string $BackupId) Set Backup record ID.
 * @method integer getBackupTimestamp() Obtain Backup timestamp.
 * @method void setBackupTimestamp(integer $BackupTimestamp) Set Backup timestamp.
 * @method array getMissingTimestamps() Obtain Timestamp range within which backup is missing.
Note: This field may return null, indicating that no valid value can be obtained.
 * @method void setMissingTimestamps(array $MissingTimestamps) Set Timestamp range within which backup is missing.
Note: This field may return null, indicating that no valid value can be obtained.
 * @method integer getStartTimestamp() Obtain Timestamp when second-level backup is enabled for the instance.
 * @method void setStartTimestamp(integer $StartTimestamp) Set Timestamp when second-level backup is enabled for the instance.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSecondLevelBackupInfoResponse extends AbstractModel
{
    /**
     * @var string Backup record ID.
     */
    public $BackupId;

    /**
     * @var integer Backup timestamp.
     */
    public $BackupTimestamp;

    /**
     * @var array Timestamp range within which backup is missing.
Note: This field may return null, indicating that no valid value can be obtained.
     */
    public $MissingTimestamps;

    /**
     * @var integer Timestamp when second-level backup is enabled for the instance.
     */
    public $StartTimestamp;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $BackupId Backup record ID.
     * @param integer $BackupTimestamp Backup timestamp.
     * @param array $MissingTimestamps Timestamp range within which backup is missing.
Note: This field may return null, indicating that no valid value can be obtained.
     * @param integer $StartTimestamp Timestamp when second-level backup is enabled for the instance.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("BackupId",$param) and $param["BackupId"] !== null) {
            $this->BackupId = $param["BackupId"];
        }

        if (array_key_exists("BackupTimestamp",$param) and $param["BackupTimestamp"] !== null) {
            $this->BackupTimestamp = $param["BackupTimestamp"];
        }

        if (array_key_exists("MissingTimestamps",$param) and $param["MissingTimestamps"] !== null) {
            $this->MissingTimestamps = [];
            foreach ($param["MissingTimestamps"] as $key => $value){
                $obj = new SecondLevelBackupMissingTimestamps();
                $obj->deserialize($value);
                array_push($this->MissingTimestamps, $obj);
            }
        }

        if (array_key_exists("StartTimestamp",$param) and $param["StartTimestamp"] !== null) {
            $this->StartTimestamp = $param["StartTimestamp"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
