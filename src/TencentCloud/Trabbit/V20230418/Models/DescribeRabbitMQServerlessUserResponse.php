<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Trabbit\V20230418\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeRabbitMQServerlessUser response structure.
 *
 * @method integer getTotalCount() Obtain The number of returned users.
 * @method void setTotalCount(integer $TotalCount) Set The number of returned users.
 * @method array getRabbitMQUserList() Obtain Currently created RabbitMQ list of users.
 * @method void setRabbitMQUserList(array $RabbitMQUserList) Set Currently created RabbitMQ list of users.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeRabbitMQServerlessUserResponse extends AbstractModel
{
    /**
     * @var integer The number of returned users.
     */
    public $TotalCount;

    /**
     * @var array Currently created RabbitMQ list of users.
     */
    public $RabbitMQUserList;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount The number of returned users.
     * @param array $RabbitMQUserList Currently created RabbitMQ list of users.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("RabbitMQUserList",$param) and $param["RabbitMQUserList"] !== null) {
            $this->RabbitMQUserList = [];
            foreach ($param["RabbitMQUserList"] as $key => $value){
                $obj = new RabbitMQUser();
                $obj->deserialize($value);
                array_push($this->RabbitMQUserList, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
