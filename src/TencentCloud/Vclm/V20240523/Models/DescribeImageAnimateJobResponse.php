<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Vclm\V20240523\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeImageAnimateJob response structure.
 *
 * @method string getStatus() Obtain Task status. WAIT: waiting; RUN: running; FAIL: failed; DONE: successful.
 * @method void setStatus(string $Status) Set Task status. WAIT: waiting; RUN: running; FAIL: failed; DONE: successful.
 * @method string getErrorCode() Obtain Error code.
 * @method void setErrorCode(string $ErrorCode) Set Error code.
 * @method string getErrorMessage() Obtain Error message.
 * @method void setErrorMessage(string $ErrorMessage) Set Error message.
 * @method string getResultVideoUrl() Obtain Generated video URL. It is valid for 24 hours.
 * @method void setResultVideoUrl(string $ResultVideoUrl) Set Generated video URL. It is valid for 24 hours.
 * @method string getMaskVideoUrl() Obtain Masked video URL.
 * @method void setMaskVideoUrl(string $MaskVideoUrl) Set Masked video URL.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeImageAnimateJobResponse extends AbstractModel
{
    /**
     * @var string Task status. WAIT: waiting; RUN: running; FAIL: failed; DONE: successful.
     */
    public $Status;

    /**
     * @var string Error code.
     */
    public $ErrorCode;

    /**
     * @var string Error message.
     */
    public $ErrorMessage;

    /**
     * @var string Generated video URL. It is valid for 24 hours.
     */
    public $ResultVideoUrl;

    /**
     * @var string Masked video URL.
     */
    public $MaskVideoUrl;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $Status Task status. WAIT: waiting; RUN: running; FAIL: failed; DONE: successful.
     * @param string $ErrorCode Error code.
     * @param string $ErrorMessage Error message.
     * @param string $ResultVideoUrl Generated video URL. It is valid for 24 hours.
     * @param string $MaskVideoUrl Masked video URL.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Status",$param) and $param["Status"] !== null) {
            $this->Status = $param["Status"];
        }

        if (array_key_exists("ErrorCode",$param) and $param["ErrorCode"] !== null) {
            $this->ErrorCode = $param["ErrorCode"];
        }

        if (array_key_exists("ErrorMessage",$param) and $param["ErrorMessage"] !== null) {
            $this->ErrorMessage = $param["ErrorMessage"];
        }

        if (array_key_exists("ResultVideoUrl",$param) and $param["ResultVideoUrl"] !== null) {
            $this->ResultVideoUrl = $param["ResultVideoUrl"];
        }

        if (array_key_exists("MaskVideoUrl",$param) and $param["MaskVideoUrl"] !== null) {
            $this->MaskVideoUrl = $param["MaskVideoUrl"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
