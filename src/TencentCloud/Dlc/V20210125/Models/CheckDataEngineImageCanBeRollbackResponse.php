<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Dlc\V20210125\Models;
use TencentCloud\Common\AbstractModel;

/**
 * CheckDataEngineImageCanBeRollback response structure.
 *
 * @method string getToRecordId() Obtain Log record ID after rolling back
 * @method void setToRecordId(string $ToRecordId) Set Log record ID after rolling back
 * @method string getFromRecordId() Obtain Log record ID before rolling back
 * @method void setFromRecordId(string $FromRecordId) Set Log record ID before rolling back
 * @method boolean getIsRollback() Obtain Whether it can be rolled back
 * @method void setIsRollback(boolean $IsRollback) Set Whether it can be rolled back
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class CheckDataEngineImageCanBeRollbackResponse extends AbstractModel
{
    /**
     * @var string Log record ID after rolling back
     */
    public $ToRecordId;

    /**
     * @var string Log record ID before rolling back
     */
    public $FromRecordId;

    /**
     * @var boolean Whether it can be rolled back
     */
    public $IsRollback;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $ToRecordId Log record ID after rolling back
     * @param string $FromRecordId Log record ID before rolling back
     * @param boolean $IsRollback Whether it can be rolled back
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("ToRecordId",$param) and $param["ToRecordId"] !== null) {
            $this->ToRecordId = $param["ToRecordId"];
        }

        if (array_key_exists("FromRecordId",$param) and $param["FromRecordId"] !== null) {
            $this->FromRecordId = $param["FromRecordId"];
        }

        if (array_key_exists("IsRollback",$param) and $param["IsRollback"] !== null) {
            $this->IsRollback = $param["IsRollback"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
