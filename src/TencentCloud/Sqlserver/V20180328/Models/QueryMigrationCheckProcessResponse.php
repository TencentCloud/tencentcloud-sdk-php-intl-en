<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Sqlserver\V20180328\Models;
use TencentCloud\Common\AbstractModel;

/**
 * QueryMigrationCheckProcess response structure.
 *
 * @method integer getTotalStep() Obtain Total number of steps.
 * @method void setTotalStep(integer $TotalStep) Set Total number of steps.
 * @method integer getCurrentStep() Obtain Current step number, starting from 1.
 * @method void setCurrentStep(integer $CurrentStep) Set Current step number, starting from 1.
 * @method array getStepDetails() Obtain Details of all steps.
 * @method void setStepDetails(array $StepDetails) Set Details of all steps.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class QueryMigrationCheckProcessResponse extends AbstractModel
{
    /**
     * @var integer Total number of steps.
     */
    public $TotalStep;

    /**
     * @var integer Current step number, starting from 1.
     */
    public $CurrentStep;

    /**
     * @var array Details of all steps.
     */
    public $StepDetails;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalStep Total number of steps.
     * @param integer $CurrentStep Current step number, starting from 1.
     * @param array $StepDetails Details of all steps.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalStep",$param) and $param["TotalStep"] !== null) {
            $this->TotalStep = $param["TotalStep"];
        }

        if (array_key_exists("CurrentStep",$param) and $param["CurrentStep"] !== null) {
            $this->CurrentStep = $param["CurrentStep"];
        }

        if (array_key_exists("StepDetails",$param) and $param["StepDetails"] !== null) {
            $this->StepDetails = [];
            foreach ($param["StepDetails"] as $key => $value){
                $obj = new StepDetail();
                $obj->deserialize($value);
                array_push($this->StepDetails, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
