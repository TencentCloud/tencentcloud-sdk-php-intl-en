<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Sqlserver\V20180328\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeDatabasesNormal response structure.
 *
 * @method integer getTotalCount() Obtain Indicates the total number of databases under the current instance.
 * @method void setTotalCount(integer $TotalCount) Set Indicates the total number of databases under the current instance.
 * @method array getDBList() Obtain Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
 * @method void setDBList(array $DBList) Set Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeDatabasesNormalResponse extends AbstractModel
{
    /**
     * @var integer Indicates the total number of databases under the current instance.
     */
    public $TotalCount;

    /**
     * @var array Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
     */
    public $DBList;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Indicates the total number of databases under the current instance.
     * @param array $DBList Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("DBList",$param) and $param["DBList"] !== null) {
            $this->DBList = [];
            foreach ($param["DBList"] as $key => $value){
                $obj = new DbNormalDetail();
                $obj->deserialize($value);
                array_push($this->DBList, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
