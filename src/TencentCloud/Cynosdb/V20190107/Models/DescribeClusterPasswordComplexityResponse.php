<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cynosdb\V20190107\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeClusterPasswordComplexity response structure.
 *
 * @method ParamInfo getValidatePasswordDictionary() Obtain Data dictionary parameter.
 * @method void setValidatePasswordDictionary(ParamInfo $ValidatePasswordDictionary) Set Data dictionary parameter.
 * @method ParamInfo getValidatePasswordLength() Obtain Specifies the password length.
 * @method void setValidatePasswordLength(ParamInfo $ValidatePasswordLength) Set Specifies the password length.
 * @method ParamInfo getValidatePasswordMixedCaseCount() Obtain Case-Sensitive character count.
 * @method void setValidatePasswordMixedCaseCount(ParamInfo $ValidatePasswordMixedCaseCount) Set Case-Sensitive character count.
 * @method ParamInfo getValidatePasswordNumberCount() Obtain Number of digits.
 * @method void setValidatePasswordNumberCount(ParamInfo $ValidatePasswordNumberCount) Set Number of digits.
 * @method ParamInfo getValidatePasswordPolicy() Obtain Password level.
 * @method void setValidatePasswordPolicy(ParamInfo $ValidatePasswordPolicy) Set Password level.
 * @method ParamInfo getValidatePasswordSpecialCharCount() Obtain Number of special characters.
 * @method void setValidatePasswordSpecialCharCount(ParamInfo $ValidatePasswordSpecialCharCount) Set Number of special characters.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeClusterPasswordComplexityResponse extends AbstractModel
{
    /**
     * @var ParamInfo Data dictionary parameter.
     */
    public $ValidatePasswordDictionary;

    /**
     * @var ParamInfo Specifies the password length.
     */
    public $ValidatePasswordLength;

    /**
     * @var ParamInfo Case-Sensitive character count.
     */
    public $ValidatePasswordMixedCaseCount;

    /**
     * @var ParamInfo Number of digits.
     */
    public $ValidatePasswordNumberCount;

    /**
     * @var ParamInfo Password level.
     */
    public $ValidatePasswordPolicy;

    /**
     * @var ParamInfo Number of special characters.
     */
    public $ValidatePasswordSpecialCharCount;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param ParamInfo $ValidatePasswordDictionary Data dictionary parameter.
     * @param ParamInfo $ValidatePasswordLength Specifies the password length.
     * @param ParamInfo $ValidatePasswordMixedCaseCount Case-Sensitive character count.
     * @param ParamInfo $ValidatePasswordNumberCount Number of digits.
     * @param ParamInfo $ValidatePasswordPolicy Password level.
     * @param ParamInfo $ValidatePasswordSpecialCharCount Number of special characters.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("ValidatePasswordDictionary",$param) and $param["ValidatePasswordDictionary"] !== null) {
            $this->ValidatePasswordDictionary = new ParamInfo();
            $this->ValidatePasswordDictionary->deserialize($param["ValidatePasswordDictionary"]);
        }

        if (array_key_exists("ValidatePasswordLength",$param) and $param["ValidatePasswordLength"] !== null) {
            $this->ValidatePasswordLength = new ParamInfo();
            $this->ValidatePasswordLength->deserialize($param["ValidatePasswordLength"]);
        }

        if (array_key_exists("ValidatePasswordMixedCaseCount",$param) and $param["ValidatePasswordMixedCaseCount"] !== null) {
            $this->ValidatePasswordMixedCaseCount = new ParamInfo();
            $this->ValidatePasswordMixedCaseCount->deserialize($param["ValidatePasswordMixedCaseCount"]);
        }

        if (array_key_exists("ValidatePasswordNumberCount",$param) and $param["ValidatePasswordNumberCount"] !== null) {
            $this->ValidatePasswordNumberCount = new ParamInfo();
            $this->ValidatePasswordNumberCount->deserialize($param["ValidatePasswordNumberCount"]);
        }

        if (array_key_exists("ValidatePasswordPolicy",$param) and $param["ValidatePasswordPolicy"] !== null) {
            $this->ValidatePasswordPolicy = new ParamInfo();
            $this->ValidatePasswordPolicy->deserialize($param["ValidatePasswordPolicy"]);
        }

        if (array_key_exists("ValidatePasswordSpecialCharCount",$param) and $param["ValidatePasswordSpecialCharCount"] !== null) {
            $this->ValidatePasswordSpecialCharCount = new ParamInfo();
            $this->ValidatePasswordSpecialCharCount->deserialize($param["ValidatePasswordSpecialCharCount"]);
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
