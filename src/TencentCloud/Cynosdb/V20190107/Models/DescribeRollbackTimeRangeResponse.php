<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cynosdb\V20190107\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeRollbackTimeRange response structure.
 *
 * @method string getTimeRangeStart() Obtain Valid regression time range start time point (abandoned).
 * @method void setTimeRangeStart(string $TimeRangeStart) Set Valid regression time range start time point (abandoned).
 * @method string getTimeRangeEnd() Obtain Valid regression time range end time point (abandoned).
 * @method void setTimeRangeEnd(string $TimeRangeEnd) Set Valid regression time range end time point (abandoned).
 * @method array getRollbackTimeRanges() Obtain Time range available for rollback
 * @method void setRollbackTimeRanges(array $RollbackTimeRanges) Set Time range available for rollback
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeRollbackTimeRangeResponse extends AbstractModel
{
    /**
     * @var string Valid regression time range start time point (abandoned).
     */
    public $TimeRangeStart;

    /**
     * @var string Valid regression time range end time point (abandoned).
     */
    public $TimeRangeEnd;

    /**
     * @var array Time range available for rollback
     */
    public $RollbackTimeRanges;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param string $TimeRangeStart Valid regression time range start time point (abandoned).
     * @param string $TimeRangeEnd Valid regression time range end time point (abandoned).
     * @param array $RollbackTimeRanges Time range available for rollback
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TimeRangeStart",$param) and $param["TimeRangeStart"] !== null) {
            $this->TimeRangeStart = $param["TimeRangeStart"];
        }

        if (array_key_exists("TimeRangeEnd",$param) and $param["TimeRangeEnd"] !== null) {
            $this->TimeRangeEnd = $param["TimeRangeEnd"];
        }

        if (array_key_exists("RollbackTimeRanges",$param) and $param["RollbackTimeRanges"] !== null) {
            $this->RollbackTimeRanges = [];
            foreach ($param["RollbackTimeRanges"] as $key => $value){
                $obj = new RollbackTimeRange();
                $obj->deserialize($value);
                array_push($this->RollbackTimeRanges, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
