<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cdwdoris\V20211228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeQueryAnalyse response structure.
 *
 * @method array getQueryDetails() Obtain Query details
 * @method void setQueryDetails(array $QueryDetails) Set Query details
 * @method integer getTotalCount() Obtain Total number of records
 * @method void setTotalCount(integer $TotalCount) Set Total number of records
 * @method integer getCurrentPage() Obtain Current page
 * @method void setCurrentPage(integer $CurrentPage) Set Current page
 * @method integer getPageSize() Obtain Number of records per page
 * @method void setPageSize(integer $PageSize) Set Number of records per page
 * @method integer getTotalPages() Obtain Total pages
 * @method void setTotalPages(integer $TotalPages) Set Total pages
 * @method string getMessage() Obtain Error message
 * @method void setMessage(string $Message) Set Error message
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeQueryAnalyseResponse extends AbstractModel
{
    /**
     * @var array Query details
     */
    public $QueryDetails;

    /**
     * @var integer Total number of records
     */
    public $TotalCount;

    /**
     * @var integer Current page
     */
    public $CurrentPage;

    /**
     * @var integer Number of records per page
     */
    public $PageSize;

    /**
     * @var integer Total pages
     */
    public $TotalPages;

    /**
     * @var string Error message
     */
    public $Message;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param array $QueryDetails Query details
     * @param integer $TotalCount Total number of records
     * @param integer $CurrentPage Current page
     * @param integer $PageSize Number of records per page
     * @param integer $TotalPages Total pages
     * @param string $Message Error message
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("QueryDetails",$param) and $param["QueryDetails"] !== null) {
            $this->QueryDetails = [];
            foreach ($param["QueryDetails"] as $key => $value){
                $obj = new QueryDetails();
                $obj->deserialize($value);
                array_push($this->QueryDetails, $obj);
            }
        }

        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("CurrentPage",$param) and $param["CurrentPage"] !== null) {
            $this->CurrentPage = $param["CurrentPage"];
        }

        if (array_key_exists("PageSize",$param) and $param["PageSize"] !== null) {
            $this->PageSize = $param["PageSize"];
        }

        if (array_key_exists("TotalPages",$param) and $param["TotalPages"] !== null) {
            $this->TotalPages = $param["TotalPages"];
        }

        if (array_key_exists("Message",$param) and $param["Message"] !== null) {
            $this->Message = $param["Message"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
