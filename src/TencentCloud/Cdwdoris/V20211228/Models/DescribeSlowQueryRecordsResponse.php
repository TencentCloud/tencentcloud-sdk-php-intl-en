<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Cdwdoris\V20211228\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSlowQueryRecords response structure.
 *
 * @method integer getTotalCount() Obtain Total
 * @method void setTotalCount(integer $TotalCount) Set Total
 * @method array getSlowQueryRecords() Obtain Record list
 * @method void setSlowQueryRecords(array $SlowQueryRecords) Set Record list
 * @method array getDBNameList() Obtain All database names
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setDBNameList(array $DBNameList) Set All database names
Note: This field may return null, indicating that no valid values can be obtained.
 * @method array getCatalogNameList() Obtain All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
 * @method void setCatalogNameList(array $CatalogNameList) Set All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSlowQueryRecordsResponse extends AbstractModel
{
    /**
     * @var integer Total
     */
    public $TotalCount;

    /**
     * @var array Record list
     */
    public $SlowQueryRecords;

    /**
     * @var array All database names
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $DBNameList;

    /**
     * @var array All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public $CatalogNameList;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $TotalCount Total
     * @param array $SlowQueryRecords Record list
     * @param array $DBNameList All database names
Note: This field may return null, indicating that no valid values can be obtained.
     * @param array $CatalogNameList All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("TotalCount",$param) and $param["TotalCount"] !== null) {
            $this->TotalCount = $param["TotalCount"];
        }

        if (array_key_exists("SlowQueryRecords",$param) and $param["SlowQueryRecords"] !== null) {
            $this->SlowQueryRecords = [];
            foreach ($param["SlowQueryRecords"] as $key => $value){
                $obj = new SlowQueryRecord();
                $obj->deserialize($value);
                array_push($this->SlowQueryRecords, $obj);
            }
        }

        if (array_key_exists("DBNameList",$param) and $param["DBNameList"] !== null) {
            $this->DBNameList = $param["DBNameList"];
        }

        if (array_key_exists("CatalogNameList",$param) and $param["CatalogNameList"] !== null) {
            $this->CatalogNameList = $param["CatalogNameList"];
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
