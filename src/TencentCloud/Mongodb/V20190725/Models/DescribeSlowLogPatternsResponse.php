<?php
/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace TencentCloud\Mongodb\V20190725\Models;
use TencentCloud\Common\AbstractModel;

/**
 * DescribeSlowLogPatterns response structure.
 *
 * @method integer getCount() Obtain Total number of slow logs
 * @method void setCount(integer $Count) Set Total number of slow logs
 * @method array getSlowLogPatterns() Obtain Slow log statistics
 * @method void setSlowLogPatterns(array $SlowLogPatterns) Set Slow log statistics
 * @method string getRequestId() Obtain The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 * @method void setRequestId(string $RequestId) Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
 */
class DescribeSlowLogPatternsResponse extends AbstractModel
{
    /**
     * @var integer Total number of slow logs
     */
    public $Count;

    /**
     * @var array Slow log statistics
     */
    public $SlowLogPatterns;

    /**
     * @var string The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public $RequestId;

    /**
     * @param integer $Count Total number of slow logs
     * @param array $SlowLogPatterns Slow log statistics
     * @param string $RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    function __construct()
    {

    }

    /**
     * For internal only. DO NOT USE IT.
     */
    public function deserialize($param)
    {
        if ($param === null) {
            return;
        }
        if (array_key_exists("Count",$param) and $param["Count"] !== null) {
            $this->Count = $param["Count"];
        }

        if (array_key_exists("SlowLogPatterns",$param) and $param["SlowLogPatterns"] !== null) {
            $this->SlowLogPatterns = [];
            foreach ($param["SlowLogPatterns"] as $key => $value){
                $obj = new SlowLogPattern();
                $obj->deserialize($value);
                array_push($this->SlowLogPatterns, $obj);
            }
        }

        if (array_key_exists("RequestId",$param) and $param["RequestId"] !== null) {
            $this->RequestId = $param["RequestId"];
        }
    }
}
